<?phpclass ControllerGlCashBook extends HController {    protected $document_type_id = 41;    protected function getAlias() {        return 'gl/cash_book';    }    protected function getPrimaryKey() {        return 'cash_book_id';    }    protected function getList() {        parent::getList();        $this->data['action_ajax'] = $this->url->link($this->getAlias() . '/getAjaxLists', 'token=' . $this->session->data['token'], 'SSL');        $this->response->setOutput($this->render());    }    public function getAjaxLists() {        $lang = $this->load->language('gl/cash_book');        $this->model[$this->getAlias()] = $this->load->model($this->getAlias());        $data = array();        $aColumns = array('action','document_date', 'document_identity', 'remarks', 'created_at', 'check_box');        /*         * Paging         */        $sLimit = "";        if (isset($_GET['iDisplayStart']) && $_GET['iDisplayLength'] != '-1') {            $data['criteria']['start'] = $_GET['iDisplayStart'];            $data['criteria']['limit'] = $_GET['iDisplayLength'];        }        /*         * Ordering         */        $sOrder = "";        if (isset($_GET['iSortCol_0'])) {            $sOrder = " ORDER BY  ";            for ($i = 0; $i < intval($_GET['iSortingCols']); $i++) {                if ($_GET['bSortable_' . intval($_GET['iSortCol_' . $i])] == "true") {                    $sOrder .= "`" . $aColumns[intval($_GET['iSortCol_' . $i])] . "` " .                        ($_GET['sSortDir_' . $i] === 'asc' ? 'asc' : 'desc') . ", ";                }            }            $sOrder = substr_replace($sOrder, "", -2);            if ($sOrder == " ORDER BY") {                $sOrder = "";            }            $data['criteria']['orderby'] = $sOrder;        }        /*         * Filtering         * NOTE this does not match the built-in DataTables filtering which does it         * word by word on any field. It's possible to do here, but concerned about efficiency         * on very large tables, and MySQL's regex functionality is very limited         */        $arrWhere = array();        $arrWhere[] = "`company_id` = '".$this->session->data['company_id']."'";        $arrWhere[] = "`company_branch_id` = '".$this->session->data['company_branch_id']."'";        if (isset($_GET['sSearch']) && $_GET['sSearch'] != "") {            $arrSSearch = array();            for ($i = 0; $i < count($aColumns); $i++) {                if (isset($_GET['bSearchable_' . $i]) && $_GET['bSearchable_' . $i] == "true" && $_GET['sSearch'] != '') {                    $arrSSearch[] = "LOWER(`" . $aColumns[$i] . "`) LIKE '%" . $this->db->escape(strtolower($_GET['sSearch'])) . "%'";                }            }            if(!empty($arrSSearch)) {                $arrWhere[] = '(' . implode(' OR ', $arrSSearch) . ')';            }        }        /* Individual column filtering */        for ($i = 0; $i < count($aColumns); $i++) {            if (isset($_GET['bSearchable_' . $i]) && $_GET['bSearchable_' . $i] == "true" && $_GET['sSearch_' . $i] != '') {                $arrWhere[] = "LOWER(`" . $aColumns[$i] . "`) LIKE '%" . $this->db->escape(strtolower($_GET['sSearch_' . $i])) . "%' ";            }        }        if (!empty($arrWhere)) {            //$data['filter']['RAW'] = substr($sWhere, 5, strlen($sWhere) - 5);            $data['filter']['RAW'] = implode(' AND ', $arrWhere);        }        //d($data, true);        $results = $this->model[$this->getAlias()]->getLists($data);        $iFilteredTotal = $results['total'];        $iTotal = $results['table_total'];        /*         * Output         */        $output = array(            "sEcho" => intval($_GET['sEcho']),            "iTotalRecords" => $iTotal,            "iTotalDisplayRecords" => $iFilteredTotal,            "aaData" => array()        );        foreach ($results['lists'] as $aRow) {            $row = array();            $actions = array();            $actions[] = array(                'text' => $lang['edit'],                'href' => $this->url->link($this->getAlias() . '/update', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $aRow[$this->getPrimaryKey()], 'SSL'),                'btn_class' => 'btn btn-primary btn-xs',                'class' => 'fa fa-pencil'            );            $actions[] = array(                'text' => $lang['print'],                'target' => '_blank',                'href' => $this->url->link($this->getAlias() . '/printDocument', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $aRow[$this->getPrimaryKey()], 'SSL'),                'btn_class' => 'btn btn-info btn-xs',                'class' => 'fa fa-print'            );            if($aRow['is_post']==0) {                $actions[] = array(                    'text' => $lang['post'],                    'href' => $this->url->link($this->getAlias() . '/post', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $aRow[$this->getPrimaryKey()], 'SSL'),                    'btn_class' => 'btn btn-info btn-xs',                    'class' => 'fa fa-thumbs-up',                    'click'=> 'return confirm(\'Are you sure you want to post this item?\');'                );                $actions[] = array(                    'text' => $lang['delete'],                    'href' => 'javascript:void(0);',                    'click' => "ConfirmDelete('" . $this->url->link($this->getAlias() . '/delete', 'token=' . $this->session->data['token'] . '&id=' . $aRow[$this->getPrimaryKey()], 'SSL') . "')",                    'btn_class' => 'btn btn-danger btn-xs',                    'class' => 'fa fa-times'                );            }            $strAction = '';            foreach ($actions as $action) {                $strAction .= '<a '.(isset($action['btn_class'])?'class="'.$action['btn_class'].'"':'').' '.(isset($action['target'])?'target="'.$action['target'].'"':'').' href="' . $action['href'] . '" data-toggle="tooltip" title="' . $action['text'] . '" ' . (isset($action['click']) ? 'onClick="' . $action['click'] . '"' : '') . '>';                if (isset($action['class'])) {                    $strAction .= '<span class="' . $action['class'] . '"></span>';                } else {                    $strAction .= $action['text'];                }                $strAction .= '</a>&nbsp;';            }            for ($i = 0; $i < count($aColumns); $i++) {                if ($aColumns[$i] == 'action') {                    $row[] = $strAction;                } elseif ($aColumns[$i] == 'created_at') {                    $row[] = stdDateTime($aRow['created_at']);                } elseif ($aColumns[$i] == 'document_date') {                    $row[] = stdDate($aRow['document_date']);                } elseif ($aColumns[$i] == 'check_box') {                    if($aRow['is_post']==0) {                        $row[] = '<input type="checkbox" name="selected[]" value="' . $aRow[$this->getPrimaryKey()] . '" />';                    } else {                        $row[] = '';                    }                } else {                    $row[] = $aRow[$aColumns[$i]];                }            }            $output['aaData'][] = $row;        }        echo json_encode($output);    }    protected function getForm() {        parent::getForm();        $this->data['document_identity'] = $this->data['lang']['auto'];        $this->data['document_date'] = stdDate();        $this->data['base_currency_id'] = $this->session->data['base_currency_id'];        $this->data['base_currency'] = $this->session->data['base_currency_name'];        $this->data['document_currency_id'] = $this->session->data['base_currency_id'];        $this->data['conversion_rate'] = "1.00";        $this->data['partner_types'] = $this->session->data['partner_types'];        $this->model['partner'] = $this->load->model('common/partner');        $this->data['partners'] = $this->model['partner']->getRows(array('company_id' => $this->session->data['company_id']),array('name'));        //d($this->data['partners'], true);        $this->model['currency'] = $this->load->model('setup/currency');        $this->data['currencies'] = $this->model['currency']->getRows(array('company_id' => $this->session->data['company_id']));        if (isset($this->request->get['cash_book_id']) && ($this->request->server['REQUEST_METHOD'] != 'POST')) {            $this->data['isEdit'] = 1;            $this->data['document_type_id'] = $this->document_type_id;            $this->data['document_id'] = $this->request->get['cash_book_id'];            $result = $this->model[$this->getAlias()]->getRow(array('cash_book_id' => $this->request->get['cash_book_id']));            foreach ($result as $field => $value) {                if ($field == 'document_date') {                    $this->data[$field] = stdDate($value);                } else {                    $this->data[$field] = $value;                }            }            $this->model['cash_book_detail'] = $this->load->model('gl/cash_book_detail');            $filter = array(                'cash_book_id' => $this->request->get['cash_book_id']            );            $details = $this->model['cash_book_detail']->getRows($filter,array('sort_order'));//            d($details,true);            foreach($details as $detail) {                $row_id = $detail['sort_order'];                if(empty($detail['ref_document_date']) || $detail['ref_document_date']=='0000-00-00') {                    $detail['ref_document_date'] = '';                } else {                    $detail['ref_document_date'] = stdDate($detail['ref_document_date']);                }                $this->data['cash_book_details'][$row_id] = $detail;            }        }        $this->data['href_get_document_ledger'] = $this->url->link('common/function/getDocumentLedger', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $this->request->get[$this->getPrimaryKey()], 'SSL');        $this->data['href_get_partner'] = $this->url->link('common/function/getPartner', 'token=' . $this->session->data['token']);        $this->data['action_post'] = $this->url->link($this->getAlias() . '/post', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $this->request->get[$this->getPrimaryKey()], 'SSL');        $this->data['href_get_documents'] = $this->url->link($this->getAlias() . '/getDocuments', 'token=' . $this->session->data['token']);        $this->data['action_validate_date'] = $this->url->link('common/function/validateDate', 'token=' . $this->session->data['token']);        $this->data['strValidation']= "{            'rules':{                'document_date': {'required': true, 'remote':  {url: '" . $this->data['action_validate_date'] . "', type: 'post'}},                'conversion_rate': {'required':true},                'document_debit' : {'required': true, 'min': 1},                'document_credit' : {'required': true, 'min': 1, equalTo: '#document_debit'},                'partner_id' : {'required':true},                'total_amount' : {'required':true},            },            messages: {            document_date:{                remote: 'Invalid Date'            }}        }";        $this->response->setOutput($this->render());    }    public function getDocuments() {        $partner_type_id = $this->request->post['partner_type_id'];        $partner_id = $this->request->post['partner_id'];        $this->model['document'] = $this->load->model('common/document');        $this->model['partner'] = $this->load->model('common/partner');        //d($partner_id);        $partner = $this->model['partner']->getRow(array('partner_type_id' => $partner_type_id, 'partner_id' => $partner_id));        $where = " l.`partner_type_id` = '".$partner_type_id."' AND l.`partner_id` = '".$partner_id."' ";        //        $where .= " AND is_post=1";        $where .= "  AND l.company_branch_id = '".$this->session->data['company_branch_id']."' AND l.company_id = '".$this->session->data['company_id']."' ";        $documents = $this->model['document']->getPendingDocuments($where,array('document_date'));        $arrDocuments = array();        $html = '<option value="">&nbsp;</option>';        foreach($documents as $document) {            //$model_document_actual = $this->load->model($document['route']);            //$row = $model_document_actual->getRow(array($document['primary_key_field'] => $document['primary_key_value']));            //$document['document_tax'] = $row['item_tax'];            $arrDocuments[$document['ref_document_identity']] = $document;            $arrDocuments[$document['ref_document_identity']]['href'] = $this->url->link($document['route'] . '/update', 'token=' . $this->session->data['token'] . '&' . $document['primary_key_field'] . '=' . $document['primary_key_value'], 'SSL');            $html .= '<option value="'.$document['ref_document_identity'].'">'.$document['ref_document_identity'].'- ('.$document['document_amount'].')'.'</option>';        }        $json = array(            'success' => true,            'html' => $html,            'documents' => $arrDocuments,        );//        d($json,true);        echo json_encode($json);    }    protected function insertData($data) {        $this->model['document_type'] = $this->load->model('common/document_type');        $document = $this->model['document_type']->getNextDocument($this->document_type_id);        $data['document_date'] = MySqlDate($data['document_date']);        $data['company_id'] = $this->session->data['company_id'];        $data['company_branch_id'] = $this->session->data['company_branch_id'];        $data['fiscal_year_id'] = $this->session->data['fiscal_year_id'];        $data['document_type_id'] = $this->document_type_id;        $data['document_prefix'] = $document['document_prefix'];        $data['document_no'] = $document['document_no'];        $data['document_identity'] = $document['document_identity'];        $cash_book_id = $this->model[$this->getAlias()]->add($this->getAlias(), $data);        $this->model['cash_book_detail'] = $this->load->model('gl/cash_book_detail');        foreach ($data['cash_book_details'] as $sort_order => $detail) {            $detail['cash_book_id'] = $cash_book_id;            $detail['sort_order'] = $sort_order;            $detail['company_id'] = $this->session->data['company_id'];            $detail['company_branch_id'] = $this->session->data['company_branch_id'];            $detail['fiscal_year_id'] = $this->session->data['fiscal_year_id'];            $cash_book_detail_id =  $this->model['cash_book_detail']->add($this->getAlias(), $detail);        }        return $cash_book_id;    }    protected function updateData($primary_key, $data) {        $data['document_date'] = MySqlDate($data['document_date']);        $data['document_id'] = $primary_key;        $this->model['cash_book'] = $this->load->model('gl/cash_book');        $this->model['cash_book_detail'] = $this->load->model('gl/cash_book_detail');        $this->model['cash_book']->edit($this->getAlias(), $primary_key, $data);        $this->model['cash_book_detail']->deleteBulk($this->getAlias(), array('cash_book_id' => $primary_key));        foreach ($data['cash_book_details'] as $sort_order => $detail) {            $detail['cash_book_id'] = $primary_key;            $detail['sort_order'] = $sort_order;            $detail['company_id'] = $this->session->data['company_id'];            $detail['company_branch_id'] = $this->session->data['company_branch_id'];            $detail['fiscal_year_id'] = $this->session->data['fiscal_year_id'];            $cash_book_detail_id =  $this->model['cash_book_detail']->add($this->getAlias(), $detail);        }        return $primary_key;    }    protected function deleteData($primary_key) {        $this->model['cash_book_detail'] = $this->load->model('gl/cash_book_detail');        $this->model['cash_book_detail']->deleteBulk($this->getAlias(), array('cash_book_id' => $primary_key));        $this->model[$this->getAlias()]->delete($this->getAlias(), $primary_key);    }    public function printDocument() {        $cash_book_id = $this->request->get['cash_book_id'];        $lang = $this->load->language($this->getAlias());        $this->model['image'] = $this->load->model('tool/image');        $this->model['setting'] = $this->load->model('common/setting');        $setting = $this->model['setting']->getRow(array(            'company_id' => $this->session->data['company_id'],            'company_branch_id' => $this->session->data['company_branch_id'],            'fiscal_year_id' => $this->session->data['fiscal_year_id'],            'module' => 'general',            'field' => 'company_logo',        ));        $session = $this->session->data;        $company_logo = $setting['value'];        $this->model['cash_book'] = $this->load->model('gl/cash_book');        $this->model['cash_book_detail'] = $this->load->model('gl/cash_book_detail');        $cash_book = $this->model['cash_book']->getRow(array('cash_book_id' => $cash_book_id));        $cash_book_details = $this->model['cash_book_detail']->getRows(array('cash_book_id' => $cash_book_id),array('sort_order'));        // d(array($cash_book_id, $cash_book, $cash_book_details), true);                $pdf = new PDF('P', PDF_UNIT, 'A4', true, 'UTF-8', false);        // set document information        $pdf->SetCreator(PDF_CREATOR);        $pdf->SetAuthor('Huzaifa Khambaty');        $pdf->SetTitle('Cash Book');        $pdf->SetSubject('Cash Book');        //Set Header        $pdf->data = array(            'company_name' => $session['company_name'],            'report_name' => $lang['heading_title'],            'company_logo' => $company_logo        );        $partners_data = array();        foreach($cash_book_details as $row)        {            $partners_data[$row['partner_name']][] = $row;        }        //d($partners_data,true);        // set margins        //$pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);        $pdf->SetMargins(5, 45, 5);        $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);        $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);        // set auto page breaks        $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);        // set font        $pdf->AddPage();        $pdf->SetFont('times', 'B', 10);        $pdf->Cell(30,7,'Document Date:',0);        $pdf->SetFont('times', '', 10);        $pdf->Cell(190,7,$cash_book['document_date'],0);        $pdf->SetFont('times', 'B', 10);        $pdf->Cell(30,7,'Document No:',0);        $pdf->SetFont('times', '', 10);        $pdf->Cell(40,7,$cash_book['document_identity'],0);        $pdf->ln(9);//        $pdf->SetFont('times', 'B', 8);//        $pdf->Cell(60,7,'Partner', 1, 0,'C');//        $pdf->SetFont('times', '', 8);//        $total_debit = 0;//        $total_credit = 0;        $total_amount = 0;        foreach($partners_data as $partner => $rows)        {            $pdf->SetFont('times', 'B', 9);            $pdf->Cell(0,7,'Partner Name : '.$partner, 0, 0,'L', 0, '', 1);            $pdf->ln(7);            $sr = 0;            $pdf->SetFont('times', '', 8);            $total_amount = 0;            foreach($rows as $ind =>$detail) {                $sr+= 1;                $pdf->Cell(27,7,$detail['ref_document_identity'], 1, 0, 'L', 0, '', 1);                $pdf->Cell(20,7,number_format($detail['amount'],2), 1, 0, 'R', 0, '', 1);                if($sr == 4){                    $pdf->ln(7);                    $sr = 0;                }                $total_amount += $detail['amount'];            }            $pdf->SetFont('times', 'B', 8);            $pdf->Cell(27,7,'Total Amount', 1, 0, 'L', 0, '', 1);            $pdf->Cell(20,7,number_format($total_amount,2), 1, 0, 'R', 0, '', 1);            $pdf->ln(7);        }       // $pdf->SetFont('times', 'B', 8);        //$pdf->ln(7);        //$pdf->Cell(140,7,'Remarks : '. $cash_book['remarks'], 1, 0, 'L', 0, '', 1);//        $pdf->Cell(25,7,'Total Amount', 1, 0, 'L', 0, '', 1);//        $pdf->Cell(25,7,number_format($cash_book['total_amount'],2), 1, 0, 'R', 0, '', 1);        //Close and output PDF document        $pdf->Output('Cash Book:'.date('YmdHis').'.pdf', 'I');    }}class PDF extends TCPDF {    public $data = array();    //Page header    public function Header() {        // Logo        if($this->data['company_logo'] != '') {            $image_file = DIR_IMAGE.$this->data['company_logo'];            //$this->Image($file, $x='', $y='', $w=0, $h=0, $type='', $link='', $align='', $resize=false, $dpi=300, $palign='', $ismask=false, $imgmask=false, $border=0, $fitbox=false, $hidden=false, $fitonpage=false);            $this->Image($image_file, 10, 10, 30, '', '', '', 'T', false, 300, '', false, false, 0, false, false, false);        }        // Set font        $this->SetFont('helvetica', 'B', 20);        $this->Ln(2);        // Title        $this->Cell(0, 10, $this->data['company_name'], 0, false, 'C', 0, '', 0, false, 'M', 'M');        $this->Ln(10);        $this->Cell(0, 10, $this->data['report_name'], 0, false, 'C', 0, '', 0, false, 'M', 'M');    }    // Page footer    public function Footer() {        // Position at 15 mm from bottom        $this->SetY(-15);        // Set font        $this->SetFont('helvetica', 'I', 8);        // Page number        $this->Cell(0, 10, 'Page '.$this->getAliasNumPage().'/'.$this->getAliasNbPages(), 0, false, 'C', 0, '', 0, false, 'T', 'M');    }}?>