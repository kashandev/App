<?phpclass ControllerInventoryStockUpdate extends HController {    protected $document_type_id = 1;    protected function getAlias() {        return 'inventory/stock_update';    }    protected function getPrimaryKey() {        return 'purchase_invoice_id';    }    protected function init()    {        $this->model[$this->getAlias()] = $this->load->model('common/setting');        $this->data['lang'] = $this->load->language('inventory/stock_update');        $this->document->setTitle($this->data['lang']['heading_title']);        $this->data['token'] = $this->session->data['token'];    }    public function index()    {        $this->redirect($this->url->link($this->getAlias() . '/update', 'token=' . $this->session->data['token'] ));    }    protected function getForm() {        parent::getForm();        $this->model['currency'] = $this->load->model('setup/currency');        $this->data['currencys'] = $this->model['currency']->getRows();        $this->model['product_category'] = $this->load->model('inventory/product_category');        $this->data['product_categorys'] = $this->model['product_category']->getRows(array('company_id' => $this->session->data['company_id']),array('name'));        $this->model['supplier'] = $this->load->model('setup/supplier');        $this->data['suppliers'] = $this->model['supplier']->getRows(array('company_id' => $this->session->data['company_id']),array('name'));        $this->model['warehouse'] = $this->load->model('inventory/warehouse');        $this->data['warehouses'] = $this->model['warehouse']->getRows(array('company_id' => $this->session->data['company_id'], 'company_branch_id' => $this->session->data['company_branch_id']));        $this->data['arrWarehouses'] = json_encode($this->data['warehouses']);        $this->data['base_currency_id'] = $this->session->data['base_currency_id'];        $this->data['base_currency'] = $this->session->data['base_currency_name'];        $this->data['document_currency_id'] = $this->session->data['base_currency_id'];        $this->data['conversion_rate'] = "1.00";        $this->data['document_date'] = stdDate();        $this->model['purchase_invoice'] = $this->load->model('inventory/purchase_invoice');        if (isset($this->request->get['purchase_invoice_id']) && ($this->request->server['REQUEST_METHOD'] != 'POST')) {            $this->data['isEdit'] = 1;            $result = $this->model['purchase_invoice']->getRow(array($this->getPrimaryKey() => $this->request->get[$this->getPrimaryKey()]));            foreach ($result as $field => $value) {                if ($field == 'document_date') {                    $this->data[$field] = stdDate($value);                } else {                    $this->data[$field] = $value;                }            }            $this->model['stock_adjustment_detail'] = $this->load->model('inventory/stock_adjustment_detail');            $rows = $this->model['stock_adjustment_detail']->getRows(array('stock_adjustment_id' => $this->request->get['stock_adjustment_id']));            foreach($rows as $row_no => $row) {                $this->data['stock_adjustment_details'][$row_no] = $row;            }        }        $this->data['href_get_warehouse_stocks'] = $this->url->link($this->getAlias() . '/getWarehouseStocks', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $this->request->get[$this->getPrimaryKey()], 'SSL');        $this->data['action_post'] = $this->url->link($this->getAlias() . '/post', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $this->request->get[$this->getPrimaryKey()], 'SSL');        $this->data['action_print'] = $this->url->link($this->getAlias() . '/printDocument', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $this->request->get[$this->getPrimaryKey()], 'SSL');        $this->data['action_validate_date'] = $this->url->link('common/function/validateDate', 'token=' . $this->session->data['token']);        $this->data['strValidation'] = "{            'rules': {                'document_date': {'required': true, 'remote':  {url: '" . $this->data['action_validate_date'] . "', type: 'post'}},                'warehouse_id': {'required': true},                'total_qty': {'required': true},                'total_amount': {'required': true},            },            messages: {            document_date:{                remote: 'Invalid Date'            }}        }";        $this->response->setOutput($this->render());    }    public function getWarehouseStocks() {        $post = $this->request->post;        $warehouse_id = $post['warehouse_id'];        $product_category_id = $post['product_category_id'];        $html = '';        $this->model['product'] = $this->load->model('inventory/product');        $this->model['warehouse'] = $this->load->model('inventory/warehouse');        $this->model['stock'] = $this->load->model('common/stock_ledger');//        $where = "product_id= '".$product['product_id']."'";//        $stock = $this->model['stock']->getStock($where);//        $products = $this->model['product']->getRows(array('company_id' => $this->session->data['company_id'],'product_category_id' => $product_category_id),array('name'));        $products = $this->model['stock']->getProductStock($product_category_id);        foreach($products as $row_id => $product) {            $warehouse = $this->model['warehouse']->getRow(array('company_id' => $this->session->data['company_id'],'warehouse_id' => $product['warehouse_id']));            $html .= '<tr id="row_id_'.$row_id.'" data-row_id="'.$row_id.'">';            $html .= '<td>';            $html .= '<input type="hidden" name="stock_adjustment_details['.$row_id.'][product_code]" value="'.$product['product_code'].'" />';            $html .= $product['product_code'];            $html .= '</td>';            $html .= '<td>';            $html .= '<input type="hidden" name="stock_adjustment_details['.$row_id.'][product_id]" value="'.$product['product_id'].'" />';            $html .= $product['name'];            $html .= '</td>';            $html .= '<td>';            $html .= '<input type="hidden" name="stock_adjustment_details['.$row_id.'][warehouse_id]" value="'.$product['warehouse_id'].'" />';            $html .= $warehouse['name'];            $html .= '</td>';            $html .= '<td>';            $html .= '<input type="hidden" name="stock_adjustment_details['.$row_id.'][unit_id]" value="'.$product['unit_id'].'" />';            $html .= $product['unit'];            $html .= '</td>';            $html .= '<td>';            $html .= '<input type="hidden" name="stock_adjustment_details['.$row_id.'][stock_qty]" value="'.$product['stock_qty'].'" />';            $html .= $product['stock_qty'];            $html .= '</td>';            $html .= '<td>';            $html .= '<input onchange="calculateRowTotal(this);" type="text" class="form-control" id="stock_adjustment_detail_qty_'.$row_id.'" name="stock_adjustment_details['.$row_id.'][qty]" value="0" />';            $html .= '</td>';            $html .= '<td>';            $html .= '<input onchange="calculateRowTotal(this);" type="text" class="form-control" id="stock_adjustment_detail_rate_'.$row_id.'" name="stock_adjustment_details['.$row_id.'][rate]" value="'.$product['avg_stock_rate'].'" />';            $html .= '</td>';            $html .= '<td>';            $html .= '<input onchange="calculateTotal();" type="text" class="form-control fDecimal" id="stock_adjustment_detail_amount_'.$row_id.'" name="stock_adjustment_details['.$row_id.'][amount]" value="0.00" />';            $html .= '</td>';            $html .= '</tr>';        }        $json = array (            'success' => true,            'post' => $post,            'html' => $html        );        echo json_encode($json);    }    protected function insertData($data) {        $this->model['purchase_invoice_detail'] = $this->load->model('inventory/purchase_invoice_detail');        $this->model['purchase_invoice'] = $this->load->model('inventory/purchase_invoice');        $this->model['stock_ledger'] = $this->load->model('common/stock_ledger');        $this->model['ledger'] = $this->load->model('gl/ledger');        $this->model['document'] = $this->load->model('common/document');        $this->model['document_type'] = $this->load->model('common/document_type');        $this->model['partner'] = $this->load->model('common/partner');        $this->model['company'] = $this->load->model('setup/company');        $this->model['product']= $this->load->model('inventory/product');        $this->model['setting']= $this->load->model('common/setting');        //d($data, true);        $document = $this->model['document_type']->getNextDocument($this->document_type_id);        $data['document_type_id'] = $this->document_type_id;        $data['document_prefix'] = $document['document_prefix'];        $data['document_no'] = $document['document_no'];        $data['document_identity'] = $document['document_identity'];        $data['company_id'] = $this->session->data['company_id'];        $data['company_branch_id'] = $this->session->data['company_branch_id'];        $data['fiscal_year_id'] = $this->session->data['fiscal_year_id'];        $data['document_date'] = MySqlDate($data['document_date']);        $data['base_amount'] = $data['net_amount'] * $data['conversion_rate'];        $data['partner_type_id'] = 1;        $purchase_invoice_id = $this->model['purchase_invoice']->add($this->getAlias(), $data);        $data['document_id'] = $purchase_invoice_id;        $insert_document = array(            'company_id' => $this->session->data['company_id'],            'company_branch_id' => $this->session->data['company_branch_id'],            'fiscal_year_id' => $this->session->data['fiscal_year_id'],            'document_type_id' => $this->document_type_id,            'document_id' => $purchase_invoice_id,            'document_identity' => $data['document_identity'],            'document_date' => $data['document_date'],            'partner_type_id' => $data['partner_type_id'],            'partner_id' => $data['partner_id'],            'document_currency_id' => $data['document_currency_id'],            'document_amount' => $data['net_amount'],            'conversion_rate' => $data['conversion_rate'],            'base_currency_id' => $data['base_currency_id'],            'base_amount' => $data['base_amount'],        );        $document_id = $this->model['document']->add($this->getAlias(), $insert_document);        $setting = $this->model['setting']->getRow(array(            'company_id' => $this->session->data['company_id'],            'company_branch_id' => $this->session->data['company_branch_id'],            'fiscal_year_id' => $this->session->data['fiscal_year_id'],            'module' => 'general',            'field' => 'cash_account_id',        ));        $cash_account_id = $setting['value'];        $setting = $this->model['setting']->getRow(array(            'company_id' => $this->session->data['company_id'],            'company_branch_id' => $this->session->data['company_branch_id'],            'fiscal_year_id' => $this->session->data['fiscal_year_id'],            'module' => 'inventory',            'field' => 'purchase_discount_account_id',        ));        $purchase_discount_account_id = $setting['value'];        $setting = $this->model['setting']->getRow(array(            'company_id' => $this->session->data['company_id'],            'company_branch_id' => $this->session->data['company_branch_id'],            'fiscal_year_id' => $this->session->data['fiscal_year_id'],            'module' => 'inventory',            'field' => 'sale_tax_account_id',        ));        $sale_tax_account_id = $setting['value'];        $setting = $this->model['setting']->getRow(array(            'company_id' => $this->session->data['company_id'],            'company_branch_id' => $this->session->data['company_branch_id'],            'fiscal_year_id' => $this->session->data['fiscal_year_id'],            'module' => 'inventory',            'field' => 'gr_ir_account_id',        ));        $gr_ir_account_id = $setting['value'];        $partner = $this->model['partner']->getRow(array('partner_type_id' => $data['partner_type_id'], 'partner_id' => $data['partner_id']));        $outstanding_account_id = $partner['outstanding_account_id'];        foreach ($data['stock_adjustment_details'] as $sort_order => $detail) {            $detail['purchase_invoice_id'] = $purchase_invoice_id;            $detail['sort_order'] = $sort_order;            $detail['company_id'] = $this->session->data['company_id'];            $detail['company_branch_id'] = $this->session->data['company_branch_id'];            $detail['fiscal_year_id'] = $this->session->data['fiscal_year_id'];            $detail['document_currency_id'] = $data['document_currency_id'];            $detail['base_currency_id'] = $data['base_currency_id'];            $detail['conversion_rate'] = $data['conversion_rate'];            $detail['base_total'] = $detail['amount'] * $data['conversion_rate'];            $detail['total_amount'] = $detail['amount'];            $purchase_invoice_detail_id = $this->model['purchase_invoice_detail']->add($this->getAlias(), $detail);            $stock_ledger = array(                'company_id' => $detail['company_id'],                'company_branch_id' => $detail['company_branch_id'],                'fiscal_year_id' => $detail['fiscal_year_id'],                'document_type_id' => $data['document_type_id'],                'document_id' => $data['document_id'],                'document_identity' => $data['document_identity'],                'document_date' => $data['document_date'],                'document_detail_id' => $purchase_invoice_detail_id,                'warehouse_id' => $detail['warehouse_id'],                'product_id' => $detail['product_id'],                'document_unit_id' => $detail['unit_id'],                'document_qty' => $detail['qty'],                'unit_conversion' => 1,                'base_unit_id' => $detail['unit_id'],                'base_qty' => $detail['qty'],                'container_no' => $detail['container_no'],                'batch_no' => $detail['batch_no'],                'document_currency_id' => $detail['document_currency_id'],                'document_rate' => $detail['rate'],                'document_amount' => $detail['amount'],                'currency_conversion' => $detail['conversion_rate'],                'base_currency_id' => $detail['base_currency_id'],                'base_rate' => ($detail['rate'] * $detail['conversion_rate']),                'base_amount' => ($detail['amount'] * $detail['conversion_rate']),            );            $stock_ledger_id = $this->model['stock_ledger']->add($this->getAlias(), $stock_ledger);            $product = $this->model['product']->getRow(array('product_id' => $detail['product_id']));            $gl_data[] = array(                'document_detail_id' => $purchase_invoice_detail_id,                'ref_document_type_id' => $detail['ref_document_type_id'],                'ref_document_identity' => $detail['ref_document_identity'],                'coa_id' => $product['inventory_account_id'],                'document_debit' => $detail['amount'],                'document_credit' => 0,                'debit' => ($detail['amount'] * $data['conversion_rate']),                'credit' => 0,                'product_id' => $detail['product_id'],                'qty' => $detail['qty'],                'document_amount' => $detail['amount'],                'amount' => ($detail['amount'] * $data['conversion_rate']),            );        }        $gl_data[] = array(            'ref_document_type_id' => $this->document_type_id,            'ref_document_identity' => $data['document_identity'],            'coa_id' => $outstanding_account_id,            'document_debit' => 0,            'document_credit' => $data['net_amount'],            'debit' => 0,            'credit' => ($data['net_amount'] * $data['conversion_rate']),        );        if($data['invoice_type']=='Cash') {            $gl_data[] = array(                'ref_document_type_id' => $this->document_type_id,                'ref_document_identity' => $data['document_identity'],                'coa_id' => $outstanding_account_id,                'document_credit' => 0,                'document_debit' => $data['net_amount'],                'credit' => 0,                'debit' => ($data['net_amount'] * $data['conversion_rate']),            );            $gl_data[] = array(                'ref_document_type_id' => $this->document_type_id,                'ref_document_identity' => $data['document_identity'],                'coa_id' => $cash_account_id,                'document_debit' => 0,                'document_credit' => $data['net_amount'],                'debit' => 0,                'credit' => ($data['net_amount'] * $data['conversion_rate']),            );        }        //d($gl_data, true);        foreach($gl_data as $sort_order => $ledger) {            $ledger['company_id'] = $this->session->data['company_id'];            $ledger['company_branch_id'] = $this->session->data['company_branch_id'];            $ledger['fiscal_year_id'] = $this->session->data['fiscal_year_id'];            $ledger['document_type_id'] = $this->document_type_id;            $ledger['document_id'] = $purchase_invoice_id;            $ledger['document_identity'] = $data['document_identity'];            $ledger['document_date'] = $data['document_date'];            $ledger['sort_order'] = $sort_order;            $ledger['base_currency_id'] = $data['base_currency_id'];            $ledger['document_currency_id'] = $data['document_currency_id'];            $ledger['conversion_rate'] = $data['conversion_rate'];            $ledger['partner_type_id'] = $data['partner_type_id'];            $ledger['partner_id'] = $data['partner_id'];            $ledger['remarks'] = $data['remarks'];            $ledger_id = $this->model['ledger']->add($this->getAlias(), $ledger);        }        return $purchase_invoice_id;    }    protected function insertRedirect($id, $data) {        $url = $this->getURL();        $this->redirect($this->url->link($this->getAlias().'/update', 'token=' . $this->session->data['token'] . '&stock_adjustment_id=' . $id, 'SSL'));    }    protected function updateData($primary_key, $data) {//d($data,true);        $this->model['purchase_invoice_detail'] = $this->load->model('inventory/purchase_invoice_detail');        $this->model['purchase_invoice'] = $this->load->model('inventory/purchase_invoice');        $this->model['stock_ledger'] = $this->load->model('common/stock_ledger');        $this->model['ledger'] = $this->load->model('gl/ledger');        $this->model['document'] = $this->load->model('common/document');        $this->model['document_type'] = $this->load->model('common/document_type');        $this->model['partner'] = $this->load->model('common/partner');        $this->model['company'] = $this->load->model('setup/company');        $this->model['product']= $this->load->model('inventory/product');        $this->model['setting']= $this->load->model('common/setting');        //d($data, true);        $document = $this->model['document_type']->getNextDocument($this->document_type_id);        $data['document_type_id'] = $this->document_type_id;        $data['document_prefix'] = $document['document_prefix'];        $data['document_no'] = $document['document_no'];        $data['document_identity'] = $document['document_identity'];        $data['company_id'] = $this->session->data['company_id'];        $data['company_branch_id'] = $this->session->data['company_branch_id'];        $data['fiscal_year_id'] = $this->session->data['fiscal_year_id'];        $data['document_date'] = MySqlDate($data['document_date']);        $data['base_amount'] = $data['net_amount'] * $data['conversion_rate'];        $data['partner_type_id'] = 1;        $purchase_invoice_id = $this->model['purchase_invoice']->add($this->getAlias(), $data);        $data['document_id'] = $purchase_invoice_id;        $insert_document = array(            'company_id' => $this->session->data['company_id'],            'company_branch_id' => $this->session->data['company_branch_id'],            'fiscal_year_id' => $this->session->data['fiscal_year_id'],            'document_type_id' => $this->document_type_id,            'document_id' => $purchase_invoice_id,            'document_identity' => $data['document_identity'],            'document_date' => $data['document_date'],            'partner_type_id' => $data['partner_type_id'],            'partner_id' => $data['partner_id'],            'document_currency_id' => $data['document_currency_id'],            'document_amount' => $data['net_amount'],            'conversion_rate' => $data['conversion_rate'],            'base_currency_id' => $data['base_currency_id'],            'base_amount' => $data['base_amount'],        );        $document_id = $this->model['document']->add($this->getAlias(), $insert_document);        $setting = $this->model['setting']->getRow(array(            'company_id' => $this->session->data['company_id'],            'company_branch_id' => $this->session->data['company_branch_id'],            'fiscal_year_id' => $this->session->data['fiscal_year_id'],            'module' => 'general',            'field' => 'cash_account_id',        ));        $cash_account_id = $setting['value'];        $setting = $this->model['setting']->getRow(array(            'company_id' => $this->session->data['company_id'],            'company_branch_id' => $this->session->data['company_branch_id'],            'fiscal_year_id' => $this->session->data['fiscal_year_id'],            'module' => 'inventory',            'field' => 'purchase_discount_account_id',        ));        $purchase_discount_account_id = $setting['value'];        $setting = $this->model['setting']->getRow(array(            'company_id' => $this->session->data['company_id'],            'company_branch_id' => $this->session->data['company_branch_id'],            'fiscal_year_id' => $this->session->data['fiscal_year_id'],            'module' => 'inventory',            'field' => 'sale_tax_account_id',        ));        $sale_tax_account_id = $setting['value'];        $setting = $this->model['setting']->getRow(array(            'company_id' => $this->session->data['company_id'],            'company_branch_id' => $this->session->data['company_branch_id'],            'fiscal_year_id' => $this->session->data['fiscal_year_id'],            'module' => 'inventory',            'field' => 'gr_ir_account_id',        ));        $gr_ir_account_id = $setting['value'];        $partner = $this->model['partner']->getRow(array('partner_type_id' => $data['partner_type_id'], 'partner_id' => $data['partner_id']));        $outstanding_account_id = $partner['outstanding_account_id'];        foreach ($data['stock_adjustment_details'] as $sort_order => $detail) {            $detail['purchase_invoice_id'] = $purchase_invoice_id;            $detail['sort_order'] = $sort_order;            $detail['company_id'] = $this->session->data['company_id'];            $detail['company_branch_id'] = $this->session->data['company_branch_id'];            $detail['fiscal_year_id'] = $this->session->data['fiscal_year_id'];            $detail['document_currency_id'] = $data['document_currency_id'];            $detail['base_currency_id'] = $data['base_currency_id'];            $detail['conversion_rate'] = $data['conversion_rate'];            $detail['base_total'] = $detail['amount'] * $data['conversion_rate'];            $detail['total_amount'] = $detail['amount'];            $purchase_invoice_detail_id = $this->model['purchase_invoice_detail']->add($this->getAlias(), $detail);            $stock_ledger = array(                'company_id' => $detail['company_id'],                'company_branch_id' => $detail['company_branch_id'],                'fiscal_year_id' => $detail['fiscal_year_id'],                'document_type_id' => $data['document_type_id'],                'document_id' => $data['document_id'],                'document_identity' => $data['document_identity'],                'document_date' => $data['document_date'],                'document_detail_id' => $purchase_invoice_detail_id,                'warehouse_id' => $detail['warehouse_id'],                'product_id' => $detail['product_id'],                'document_unit_id' => $detail['unit_id'],                'document_qty' => $detail['qty'],                'unit_conversion' => 1,                'base_unit_id' => $detail['unit_id'],                'base_qty' => $detail['qty'],                'container_no' => $detail['container_no'],                'batch_no' => $detail['batch_no'],                'document_currency_id' => $detail['document_currency_id'],                'document_rate' => $detail['rate'],                'document_amount' => $detail['amount'],                'currency_conversion' => $detail['conversion_rate'],                'base_currency_id' => $detail['base_currency_id'],                'base_rate' => ($detail['rate'] * $detail['conversion_rate']),                'base_amount' => ($detail['amount'] * $detail['conversion_rate']),            );            $stock_ledger_id = $this->model['stock_ledger']->add($this->getAlias(), $stock_ledger);            $product = $this->model['product']->getRow(array('product_id' => $detail['product_id']));            $gl_data[] = array(                'document_detail_id' => $purchase_invoice_detail_id,                'ref_document_type_id' => $detail['ref_document_type_id'],                'ref_document_identity' => $detail['ref_document_identity'],                'coa_id' => $product['inventory_account_id'],                'document_debit' => $detail['amount'],                'document_credit' => 0,                'debit' => ($detail['amount'] * $data['conversion_rate']),                'credit' => 0,                'product_id' => $detail['product_id'],                'qty' => $detail['qty'],                'document_amount' => $detail['amount'],                'amount' => ($detail['amount'] * $data['conversion_rate']),            );        }        $gl_data[] = array(            'ref_document_type_id' => $this->document_type_id,            'ref_document_identity' => $data['document_identity'],            'coa_id' => $outstanding_account_id,            'document_debit' => 0,            'document_credit' => $data['net_amount'],            'debit' => 0,            'credit' => ($data['net_amount'] * $data['conversion_rate']),        );        if($data['invoice_type']=='Cash') {            $gl_data[] = array(                'ref_document_type_id' => $this->document_type_id,                'ref_document_identity' => $data['document_identity'],                'coa_id' => $outstanding_account_id,                'document_credit' => 0,                'document_debit' => $data['net_amount'],                'credit' => 0,                'debit' => ($data['net_amount'] * $data['conversion_rate']),            );            $gl_data[] = array(                'ref_document_type_id' => $this->document_type_id,                'ref_document_identity' => $data['document_identity'],                'coa_id' => $cash_account_id,                'document_debit' => 0,                'document_credit' => $data['net_amount'],                'debit' => 0,                'credit' => ($data['net_amount'] * $data['conversion_rate']),            );        }        //d($gl_data, true);        foreach($gl_data as $sort_order => $ledger) {            $ledger['company_id'] = $this->session->data['company_id'];            $ledger['company_branch_id'] = $this->session->data['company_branch_id'];            $ledger['fiscal_year_id'] = $this->session->data['fiscal_year_id'];            $ledger['document_type_id'] = $this->document_type_id;            $ledger['document_id'] = $purchase_invoice_id;            $ledger['document_identity'] = $data['document_identity'];            $ledger['document_date'] = $data['document_date'];            $ledger['sort_order'] = $sort_order;            $ledger['base_currency_id'] = $data['base_currency_id'];            $ledger['document_currency_id'] = $data['document_currency_id'];            $ledger['conversion_rate'] = $data['conversion_rate'];            $ledger['partner_type_id'] = $data['partner_type_id'];            $ledger['partner_id'] = $data['partner_id'];            $ledger['remarks'] = $data['remarks'];            $ledger_id = $this->model['ledger']->add($this->getAlias(), $ledger);        }        return $purchase_invoice_id;    }    protected function updateRedirect($id, $data) {        $url = $this->getURL();        $this->redirect($this->url->link('inventory/purchase_invoice&', 'token=' . $this->session->data['token'] . '&stock_adjustment_id=' . $id, 'SSL'));    }    protected function deleteData($primary_key) {        $this->model['stock_adjustment_detail'] = $this->load->model('inventory/stock_adjustment_detail');        $this->model['stock_adjustment_detail']->deleteBulk($this->getAlias(),array('stock_adjustment_id' => $primary_key));        $this->model['ledger'] = $this->load->model('gl/ledger');        $this->model['ledger']->deleteBulk($this->getAlias(), array('document_type_id' => $this->document_type_id, 'document_id' => $primary_key));        $this->model['document'] = $this->load->model('common/document');        $this->model['document']->deleteBulk($this->getAlias(), array('document_type_id' => $this->document_type_id, 'document_id' => $primary_key));        $this->model['stock_ledger'] = $this->load->model('common/stock_ledger');        $this->model['stock_ledger']->deleteBulk($this->getAlias(), array('document_type_id' => $this->document_type_id, 'document_id' => $primary_key));        $this->model[$this->getAlias()]->delete($this->getAlias(), $primary_key);    }    public function printDocument() {        $company_id = $this->session->data['company_id'];        $company_branch_id = $this->session->data['company_branch_id'];        $fiscal_year_id = $this->session->data['fiscal_year_id'];        $stock_adjustment_id = $this->request->get['stock_adjustment_id'];        $this->data['lang'] = $this->load->language($this->getAlias());        $this->model['image'] = $this->load->model('tool/image');        $this->model['company'] = $this->load->model('setup/company');        $this->model['company_branch'] = $this->load->model('setup/company_branch');        $company = $this->model['company']->getRow(array('company_id' => $company_id));        $this->data['company'] = $company;        if ($company['company_logo'] && file_exists(DIR_IMAGE . $company['company_logo'])) {            $company_logo = $this->model['image']->resize($company['company_logo'], 75, 75);        } else {            $company_logo = "";        }        $this->data['company_logo'] = $company_logo;        $this->data['company_branch'] = $this->model['company_branch']->getRow(array('company_id' => $company_id, 'company_branch_id' => $company_branch_id));        $this->model['stock_adjustment'] = $this->load->model('inventory/stock_adjustment');        $row = $this->model['stock_adjustment']->getRow(array('stock_adjustment_id' => $stock_adjustment_id));        $this->model['partner'] = $this->load->model('common/partner');        $partner = $this->model['partner']->getRow(array('company_id' => $company_id, 'company_branch_id' => $company_branch_id, 'partner_type_id' => $row['partner_type_id'], 'partner_id' => $row['partner_id']));        //d($partner, true);        $this->data['document_date'] = $row['document_date'];        $this->data['document_no'] = $row['document_identity'];        $this->data['partner_name'] = $partner['name'];        $this->data['phone_no'] = $partner['phone'];        $this->data['address'] = $partner['address'];        $this->model['stock_adjustment_detail'] = $this->load->model('inventory/stock_adjustment_detail');        $details = $this->model['stock_adjustment_detail']->getRows(array('stock_adjustment_id' => $stock_adjustment_id));        foreach($details as $row_no => $detail) {            $this->data['details'][$row_no] = $detail;        }        //d($row,$detail,true);        $this->template = 'inventory/stock_adjustment_print.tpl';        $contents = $this->render();        try        {            // init HTML2PDF            $html2pdf = new HTML2PDF('L', 'A5', 'en', true, 'UTF-8', array(0, 0, 0, 0));            // display the full page            $html2pdf->pdf->SetDisplayMode('fullpage');            // convert            $html2pdf->writeHTML($contents);            // send the PDF            $html2pdf->Output('Stock Update.pdf');        } catch(HTML2PDF_exception $e) {            echo $e;            exit;        }    }}?>