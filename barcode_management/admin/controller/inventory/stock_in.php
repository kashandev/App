<?phpclass ControllerInventoryStockIn extends HController {    protected $document_type_id = 36;    protected function getAlias() {        return 'inventory/stock_in';    }    protected function getPrimaryKey() {        return 'stock_in_id';    }    protected function getList() {        parent::getList();        $this->data['action_ajax'] = $this->url->link($this->getAlias() . '/getAjaxLists', 'token=' . $this->session->data['token'], 'SSL');        $this->response->setOutput($this->render());    }    public function getAjaxLists() {        $lang = $this->load->language($this->getAlias());        $this->model[$this->getAlias()] = $this->load->model($this->getAlias());        $data = array();        $aColumns = array('action', 'document_date', 'document_identity','remarks', 'total_price_master', 'created_at', 'check_box');        /*         * Paging         */        $sLimit = "";        if (isset($_GET['iDisplayStart']) && $_GET['iDisplayLength'] != '-1') {            $data['criteria']['start'] = $_GET['iDisplayStart'];            $data['criteria']['limit'] = $_GET['iDisplayLength'];        }        /*         * Ordering         */        $sOrder = "";        if (isset($_GET['iSortCol_0'])) {            $sOrder = " ORDER BY  ";            for ($i = 0; $i < intval($_GET['iSortingCols']); $i++) {                if ($_GET['bSortable_' . intval($_GET['iSortCol_' . $i])] == "true") {                    $sOrder .= "`" . $aColumns[intval($_GET['iSortCol_' . $i])] . "` " .                        ($_GET['sSortDir_' . $i] === 'asc' ? 'asc' : 'desc') . ", ";                }            }            $sOrder = substr_replace($sOrder, "", -2);            if ($sOrder == " ORDER BY") {                $sOrder = "";            }            $data['criteria']['orderby'] = $sOrder;        }        /*         * Filtering         * NOTE this does not match the built-in DataTables filtering which does it         * word by word on any field. It's possible to do here, but concerned about efficiency         * on very large tables, and MySQL's regex functionality is very limited         */        $arrWhere = array();        $arrWhere[] = "`company_id` = '".$this->session->data['company_id']."'";        $arrWhere[] = "`company_branch_id` = '".$this->session->data['company_branch_id']."'";        $arrWhere[] = "`fiscal_year_id` = '".$this->session->data['fiscal_year_id']."'";        if (isset($_GET['sSearch']) && $_GET['sSearch'] != "") {            $arrSSearch = array();            for ($i = 0; $i < count($aColumns); $i++) {                if (isset($_GET['bSearchable_' . $i]) && $_GET['bSearchable_' . $i] == "true" && $_GET['sSearch'] != '') {                    $arrSSearch[] = "LOWER(`" . $aColumns[$i] . "`) LIKE '%" . $this->db->escape(strtolower($_GET['sSearch'])) . "%'";                }            }            if(!empty($arrSSearch)) {                $arrWhere[] = '(' . implode(' OR ', $arrSSearch) . ')';            }        }        /* Individual column filtering */        for ($i = 0; $i < count($aColumns); $i++) {            if (isset($_GET['bSearchable_' . $i]) && $_GET['bSearchable_' . $i] == "true" && $_GET['sSearch_' . $i] != '') {                $arrWhere[] = "LOWER(`" . $aColumns[$i] . "`) LIKE '%" . $this->db->escape(strtolower($_GET['sSearch_' . $i])) . "%' ";            }        }        if (!empty($arrWhere)) {            //$data['filter']['RAW'] = substr($sWhere, 5, strlen($sWhere) - 5);            $data['filter']['RAW'] = implode(' AND ', $arrWhere);        }        //d($data, true);        $results = $this->model[$this->getAlias()]->getLists($data);        $iFilteredTotal = $results['total'];        $iTotal = $results['table_total'];        /*         * Output         */        $output = array(            "sEcho" => intval($_GET['sEcho']),            "iTotalRecords" => $iTotal,            "iTotalDisplayRecords" => $iFilteredTotal,            "aaData" => array()        );        foreach ($results['lists'] as $aRow) {            $row = array();            $actions = array();            $actions[] = array(                'text' => $lang['edit'],                'href' => $this->url->link($this->getAlias() . '/update', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $aRow[$this->getPrimaryKey()], 'SSL'),                'btn_class' => 'btn btn-warning btn-xs',                'class' => 'fa fa-edit'            );          if($aRow['is_post']==1) {            $actions[] = array(                'text' => 'Print',                'target' => '_blank',                'href' => $this->url->link($this->getAlias() . '/printLabels', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $aRow[$this->getPrimaryKey()], 'SSL'),                    'btn_class' => 'btn btn-info btn-xs',                'class' => 'fa fa-print'            );           }            if($aRow['is_post']==0) {                $actions[] = array(                    'text' => $lang['post'],                    'href' => $this->url->link($this->getAlias() . '/post', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $aRow[$this->getPrimaryKey()], 'SSL'),                    'btn_class' => 'btn btn-info btn-xs',                    'class' => 'fa fa-thumbs-up'                );                $actions[] = array(                    'text' => $lang['delete'],                    'href' => 'javascript:void(0);',                    'click' => "ConfirmDelete('" . $this->url->link($this->getAlias() . '/delete', 'token=' . $this->session->data['token'] . '&id=' . $aRow[$this->getPrimaryKey()], 'SSL') . "')",                    'btn_class' => 'btn btn-danger btn-xs',                    'class' => 'fa fa-times'                );            }            $strAction = '';            foreach ($actions as $action) {                $strAction .= '<a '.(isset($action['btn_class'])?'class="'.$action['btn_class'].'"':'').' href="' . $action['href'] .'" '. (isset($action['target']) ? 'target="' . $action['target'] . '"' : '') . ' data-toggle="tooltip" title="' . $action['text'] . '" ' . (isset($action['click']) ? 'onClick="' . $action['click'] . '"' : '') . '>';                if (isset($action['class'])) {                    $strAction .= '<span class="' . $action['class'] . '"></span>';                } else {                    $strAction .= $action['text'];                }                $strAction .= '</a>&nbsp;';            }            for ($i = 0; $i < count($aColumns); $i++) {                if ($aColumns[$i] == 'action') {                    $row[] = $strAction;                } elseif ($aColumns[$i] == 'created_at') {                    $row[] = stdDateTime($aRow['created_at']);                }elseif ($aColumns[$i] == 'document_date') {                    $row[] = stdDate($aRow['document_date']);                } elseif ($aColumns[$i] == 'check_box') {                    if($aRow['is_post']==0) {                        $row[] = '<input type="checkbox" name="selected[]" value="' . $aRow[$this->getPrimaryKey()] . '" />';                    } else {                        $row[] = '';                    }                } else {                    $row[] = $aRow[$aColumns[$i]];                }            }            $output['aaData'][] = $row;        }        echo json_encode($output);    }    protected function getForm() {        parent::getForm();        $this->model['product'] = $this->load->model('inventory/product');        $this->model['product_master'] = $this->load->model('inventory/product_master');//        $this->data['products'] = $this->model['product']->getRows(array('company_id' => $this->session->data['company_id']));        $this->model['currency'] = $this->load->model('setup/currency');        $this->data['currencys'] = $this->model['currency']->getRows();        $this->model['unit'] = $this->load->model('inventory/unit');        $this->data['units'] = $this->model['unit']->getRows(array('company_id' => $this->session->data['company_id']));        $this->model['warehouse'] = $this->load->model('inventory/warehouse');        $this->data['warehouses'] = $this->model['warehouse']->getRows(array('company_id' => $this->session->data['company_id'], 'company_branch_id' => $this->session->data['company_branch_id']));        $this->data['arrWarehouses'] = json_encode($this->data['warehouses']);        $this->model['supplier'] = $this->load->model('setup/supplier');        $this->data['suppliers'] = $this->model['supplier']->getRows(array('company_id' => $this->session->data['company_id'], 'company_branch_id' => $this->session->data['company_branch_id']));        //$this->model['cost_estimation'] = $this->load->model('inventory/cost_estimation');        //$file_nos = $this->model['cost_estimation']->getRows(array('company_id' => $this->session->data['company_id'], 'company_branch_id' => $this->session->data['company_branch_id'], 'product_id'=> $this->request->get['product_id']));        //$this->data['arrWarehouses'] = json_encode($this->data['warehouses']);        // $this->model['cost_center'] = $this->load->model('setup/cost_center');        // $this->data['cost_centers'] = $this->model['cost_center']->getRows(array('company_id' => $this->session->data['company_id']));        $this->model['coa'] = $this->load->model('gl/coa_level3');        $this->data['coas'] = $this->model['coa']->getRows(array('company_id' => $this->session->data['company_id']),array('level3_display_name'));//        $this->model['coa'] = $this->load->model('gl/coa_level3');        $this->model['purchase_order'] = $this->load->model('inventory/purchase_order');        $this->data['sales_tax_account'] = $this->model['purchase_order']->getSalesTaxAccount();        //$this->data['sales_tax_adjustable_account'] = $this->model['coa']->getRow(array('company_id' => $this->session->data['company_id'], 'name' => 'SALES TAX ADJUSTABLE - IMPORT'),array('level3_display_name'));        //d($this->data['sales_tax_account'],true);        $this->data['base_currency_id'] = $this->session->data['base_currency_id'];        $this->data['base_currency'] = $this->session->data['base_currency_name'];        $this->data['document_currency_id'] = $this->session->data['base_currency_id'];        $this->data['conversion_rate'] = "1.00";        //d($this->data, true);        $this->data['partner_types'] = $this->session->data['partner_types'];        // d($this->session->data,true);        $this->data['document_date'] = stdDate();        if (isset($this->request->get['stock_in_id']) && ($this->request->server['REQUEST_METHOD'] != 'POST')) {            $this->data['isEdit'] = 1;            $result = $this->model[$this->getAlias()]->getRow(array('stock_in_id' => $this->request->get[$this->getPrimaryKey()]));            //   d($result,true);            foreach ($result as $field => $value) {                if ($field == 'document_date') {                    $this->data[$field] = stdDate($value);                } else {                    $this->data[$field] = $value;                }            }            $this->data['document_type_id'] = $this->document_type_id;            $this->data['document_id'] = $this->request->get['stock_in_id'];            $this->model['stock_in_detail'] = $this->load->model('inventory/stock_in_detail');            $stock_in_details = $this->model['stock_in_detail']->getRows(array('stock_in_id' => $this->request->get['stock_in_id']), array('sort_order'));            // $this->model['goods_received'] = $this->load->model('inventory/goods_received');            // $this->model['purchase_order'] = $this->load->model('inventory/purchase_order');            // $this->model['product_master'] = $this->load->model('inventory/product_master');           // d($stock_in_details,true);            foreach ($stock_in_details as $row_no => $detail) {                // $type_of_material = $this->model['product']->getRow(array('product_id' => $detail['product_id']));                // $goods_received = $this->model['goods_received']->getRow(array('document_identity' => $detail['ref_document_identity']));                // $purchase_order = $this->model['purchase_order']->getRow(array('document_identity' => $detail['ref_document_identity']));                // if( $detail['ref_document_type_id'] == 17 )                // {                //     $detail['href'] = $this->url->link('inventory/goods_received/update', 'token=' . $this->session->data['token'] . '&goods_received_id=' .$goods_received['goods_received_id'], 'SSL');                // }                // else if( $detail['ref_document_type_id'] == 4 )                // {                //     $detail['href'] = $this->url->link('inventory/purchase_order/update', 'token=' . $this->session->data['token'] . '&purchase_order_id=' .$purchase_order['purchase_order_id'], 'SSL');                // }                $product = $this->model['product_master']->getRow(array('product_master_id' => $detail['product_id']));                $detail['model'] = $product['model'];                $detail['brand'] = $product['brand'];                $this->data['stock_in_details'][$row_no] = $detail;                // $this->data['stock_in_details'][$row_no]['type_of_material'] = $type_of_material['type_of_material'];            }            // $this->model['stock_in_expense'] = $this->load->model('inventory/stock_in_expense');            // $this->data['stock_in_expenses'] = $this->model['stock_in_expense']->getRows(array('stock_in_id' => $this->request->get['stock_in_id']));            // $this->model['stock_in_sales_tax'] = $this->load->model('inventory/stock_in_sales_tax');            // $this->data['stock_in_sales_taxs'] = $this->model['stock_in_sales_tax']->getRows(array('stock_in_id' => $this->request->get['stock_in_id']));            // d($this->data,true);        }        $this->data['partner_type_id'] = 1;        $this->data['href_get_product_serial_no'] = $this->url->link($this->getAlias() . '/getProductSerialNo', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $this->request->get[$this->getPrimaryKey()], 'SSL');        $this->data['href_get_json_products_for_stock_in'] = $this->url->link($this->getAlias() . '/getProductJsonForStockIn', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $this->request->get[$this->getPrimaryKey()], 'SSL');        $this->data['action_print_barcode'] = $this->url->link($this->getAlias() . '/printLabels', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $this->request->get[$this->getPrimaryKey()], 'SSL');        $this->data['href_get_product_json'] = $this->url->link($this->getAlias() . '/getProductJson', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $this->request->get[$this->getPrimaryKey()], 'SSL');        $this->data['href_get_ref_document_no'] = $this->url->link($this->getAlias() . '/getReferenceDocumentNos', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $this->request->get[$this->getPrimaryKey()], 'SSL');        $this->data['href_get_ref_document'] = $this->url->link($this->getAlias() . '/getReferenceDocument', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $this->request->get[$this->getPrimaryKey()], 'SSL');        $this->data['href_get_purchase_order'] = $this->url->link($this->getAlias() . '/getPurchaseOrder', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $this->request->get[$this->getPrimaryKey()], 'SSL');        $this->data['href_get_goods_received'] = $this->url->link($this->getAlias() . '/getGoodsReceived', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $this->request->get[$this->getPrimaryKey()], 'SSL');        $this->data['action_post'] = $this->url->link($this->getAlias() . '/post', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $this->request->get[$this->getPrimaryKey()], 'SSL');        // $this->data['action_print'] = $this->url->link($this->getAlias() . '/printDocument', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $this->request->get[$this->getPrimaryKey()], 'SSL');        // $this->data['action_print_excel'] = $this->url->link($this->getAlias() . '/printDocumentExcel', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $this->request->get[$this->getPrimaryKey()], 'SSL');        $this->data['action_validate_date'] = $this->url->link('common/function/validateDate', 'token=' . $this->session->data['token']);        $this->data['strValidation'] = "{            'rules': {                'document_date': {'required': true, 'remote':  {url: '" . $this->data['action_validate_date'] . "', type: 'post'}},                'partner_id': {'required': true},                'supplier_id': {'required': true},                'net_amount': {'required': true},            },            'ignore': [],        }";        $this->response->setOutput($this->render());    }    public function getProductJsonForStockIn()    {        $post = $this->request->post;        $session = $this->session->data;        $this->model['product_master'] = $this->load->model('inventory/product_master');        $filter = [];        $filter[] = "p.company_id = '". $session['company_id'] ."'";//        $filter[] = "(p.product_type = 'Raw Material' OR p.product_type = 'Finished Goods')";//        $filter[] = "LOWER(`p`.`status`) = 'active'";        $filter = implode(' AND ', $filter);        $options = $this->model['product_master']->getOptionList($post['q'], $filter, ['p.name']);        $items = [];        foreach($options['items'] as $row) {            $items[] = [                'id' => $row['product_master_id'],                // 'text' => $row['name'],                'text' => implode(' - ', array(                    $row['product_code'],                    $row['brand'],                    $row['model'],                    $row['name'],                )),                'description' => $row['description'],                'product_code' => $row['product_code'],                'category_id' => $row['category_id'],                //'sub_category_id' => $row['sub_category_id'],                'unit_id' => $row['unit_id'],                'unit' => $row['unit'],//                'charge_unit_id' => $row['charge_unit_id'],//                'charge_unit' => $row['charge_unit'],//                'calc_weight' => $row['calc_weight'],//                'width' => $row['width'],//                'length' => $row['length'],//                'thickness' => $row['thickness'],//                'dia' => $row['dia'],//                'type_of_material' => $row['type_of_material']            ];        }        $json = [            'total_count' => $options['total_count'],            'items' => $items,            'filter' => $filter        ];        echo json_encode($json);        exit;    }    protected function insertData($data) {        $this->model['stock_in_detail'] = $this->load->model('inventory/stock_in_detail');        $this->model['document'] = $this->load->model('common/document');        $this->model['document_type'] = $this->load->model('common/document_type');        $this->model['company'] = $this->load->model('setup/company');        $this->model['product']= $this->load->model('inventory/product');        $this->model['product_master']= $this->load->model('inventory/product_master');        $document = $this->model['document_type']->getNextDocument($this->document_type_id);        $data['document_type_id'] = $this->document_type_id;        $data['document_prefix'] = $document['document_prefix'];        $data['document_no'] = $document['document_no'];        $data['document_identity'] = $document['document_identity'];        $data['company_id'] = $this->session->data['company_id'];        $data['company_branch_id'] = $this->session->data['company_branch_id'];        $data['fiscal_year_id'] = $this->session->data['fiscal_year_id'];        $data['document_date'] = MySqlDate($data['document_date']);        $data['base_amount'] = $data['total_price_master'];        $stock_in_id = $this->model[$this->getAlias()]->add($this->getAlias(), $data);        $data['document_id'] = $stock_in_id;        $insert_document = array(            'company_id' => $this->session->data['company_id'],            'company_branch_id' => $this->session->data['company_branch_id'],            'fiscal_year_id' => $this->session->data['fiscal_year_id'],            'document_type_id' => $this->document_type_id,            'document_id' => $stock_in_id,            'document_identity' => $data['document_identity'],            'document_date' => $data['document_date'],            'document_amount' => $data['total_price_master'],            'base_amount' => $data['base_amount'],        );        $document_id = $this->model['document']->add($this->getAlias(), $insert_document);        $sort_order = 0;        foreach ($data['stock_in_details'] as $sort_order => $detail) {            $detail['stock_in_id'] = $stock_in_id;            $detail['sort_order'] = $sort_order;            $detail['company_id'] = $this->session->data['company_id'];            $detail['company_branch_id'] = $this->session->data['company_branch_id'];            $detail['fiscal_year_id'] = $this->session->data['fiscal_year_id'];            $stock_in_detail_id = $this->model['stock_in_detail']->add($this->getAlias(), $detail);        }        return $stock_in_id;    }    protected function updateData($primary_key, $data) {        // d($data,true);        $this->model['stock_in_detail'] = $this->load->model('inventory/stock_in_detail');        $this->model['document'] = $this->load->model('common/document');        $this->model['document_type'] = $this->load->model('common/document_type');        $this->model['company'] = $this->load->model('setup/company');        $data['company_id'] = $this->session->data['company_id'];        $data['company_branch_id'] = $this->session->data['company_branch_id'];        $data['fiscal_year_id'] = $this->session->data['fiscal_year_id'];        $data['document_date'] = MySqlDate($data['document_date']);        $data['base_amount'] = $data['total_price_master'];        $stock_in_id = $this->model[$this->getAlias()]->edit($this->getAlias(), $primary_key, $data);        $data['document_id'] = $stock_in_id;        $this->model['stock_in_detail']->deleteBulk($this->getAlias(), array('stock_in_id' => $stock_in_id));        $this->model['document']->deleteBulk($this->getAlias(), array('document_type_id' => $this->document_type_id, 'document_id' => $primary_key));        $insert_document = array(            'company_id' => $this->session->data['company_id'],            'company_branch_id' => $this->session->data['company_branch_id'],            'fiscal_year_id' => $this->session->data['fiscal_year_id'],            'document_type_id' => $this->document_type_id,            'document_id' => $stock_in_id,            'document_identity' => $data['document_identity'],            'document_date' => $data['document_date'],            'document_amount' => $data['total_price_master'],            'base_amount' => $data['base_amount'],        );        $document_id = $this->model['document']->add($this->getAlias(), $insert_document);        $data['document_type_id'] = $this->document_type_id;        foreach ($data['stock_in_details'] as $sort_order => $detail) {            $detail['stock_in_id'] = $stock_in_id;            $detail['sort_order'] = $sort_order;            $detail['company_id'] = $this->session->data['company_id'];            $detail['company_branch_id'] = $this->session->data['company_branch_id'];            $detail['fiscal_year_id'] = $this->session->data['fiscal_year_id'];            $stock_in_detail_id = $this->model['stock_in_detail']->add($this->getAlias(), $detail);        }        return $stock_in_id;    }    protected function deleteData($primary_key) {        $this->model['stock_in_detail'] = $this->load->model('inventory/stock_in_detail');        $this->model['stock_in_detail']->deleteBulk($this->getAlias(), array('stock_in_id' => $primary_key));        $this->model['document'] = $this->load->model('common/document');        $this->model['document']->deleteBulk($this->getAlias(), array('document_type_id' => $this->document_type_id, 'document_id' => $primary_key));        $this->model['stock_ledger'] = $this->load->model('common/stock_ledger');        $this->model['stock_ledger']->deleteBulk($this->getAlias(), array('company_id' => $this->session->data['company_id'],'document_type_id' => $this->document_type_id, 'document_id' => $primary_key));        $this->model[$this->getAlias()]->delete($this->getAlias(), $primary_key);    }    public function post() {        $lang = $this->load->language($this->getAlias());        if (!$this->user->hasPermission('post', $this->getAlias())) {            $this->session->data['error_warning'] = $lang['error_permission_post'];        } else {            $data = array(                'is_post' => 1,                'post_date' => date('Y-m-d H:i:s'),                'post_by_id' => $this->session->data['user_id']            );            $this->model['stock_in'] = $this->load->model('inventory/stock_in');            $this->model['stock_in_detail'] = $this->load->model('inventory/stock_in_detail');            $this->model['stock_ledger_history'] = $this->load->model('common/stock_ledger_history');            $this->model['stock_ledger'] = $this->load->model('common/stock_ledger');            $this->model['product_master']= $this->load->model('inventory/product_master');            $this->model['product']= $this->load->model('inventory/product');            $this->model['warehouse']= $this->load->model('inventory/warehouse');            $stock_in_id = $this->request->get[$this->getPrimaryKey()];            $dataMaster = $this->model['stock_in']->getRow(array('stock_in_id' => $this->request->get['stock_in_id']));            $stock_in_details = $this->model['stock_in_detail']->getRows(array('stock_in_id' => $this->request->get['stock_in_id']), array('sort_order'));            $dataMaster['document_id'] = $stock_in_id;                 $sr_no = '';            $serial_no = '';            foreach ($stock_in_details as $row_no => $detail) {                $product = $this->model['product_master']->getRow(array('product_master_id' => $detail['product_id']));                $warehouse = $this->model['warehouse']->getRow(array('warehouse_id' => $detail['warehouse_id']));                $stock_in_detail_id = $detail['stock_in_detail_id'];                $cost_price = ($detail['total_price'] / $detail['qty']);                $sno = 0;                for ($x = 0; $x < $detail['qty']; $x++) {                    $serial_no = $this->model['product']->getProductSerialNo($detail['product_code'],$this->document_type_id);                    $serialNo =  $serial_no['count_serial_no']+1;                    $sr_no = $detail['product_code'].'-'.($serialNo);                    $product_data = array(                        'company_id' => $detail['company_id'],                        'product_master_id' => $product['product_master_id'],                        'product_category_id' => $product['product_category_id'],                        'product_code' => $product['product_code'],                        'name' => $product['name'],                        'serial_no' => $sr_no,                        'unit_id' => $product['unit_id'],                        'brand_id' => $product['brand_id'],                        'make_id' => $product['make_id'],                        'model_id' => $product['model_id'],                        'description' => $product['description'],                        'cost_price' => $cost_price,                        'sale_price' => $product['sale_price'],                        'inventory_account_id' => $product['inventory_account_id'],                        'stock_in_detail_id' => $stock_in_detail_id,                        'stock_in_id' => $stock_in_id,                        'sort_order'  => $serialNo                    );                    $product_id = $this->model['product']->add($this->getAlias(), $product_data);                    $stock_ledger = array(                        'company_id' => $detail['company_id'],                        'company_branch_id' => $detail['company_branch_id'],                        'fiscal_year_id' => $detail['fiscal_year_id'],                        'document_type_id' => $dataMaster['document_type_id'],                        'document_id' => $dataMaster['document_id'],                        'document_identity' => $dataMaster['document_identity'],                        'document_date' => $dataMaster['document_date'],                        'document_detail_id' => $stock_in_detail_id,                        'warehouse_id' => $detail['warehouse_id'],                        'product_id' => $product_id,                        'product_master_id' =>  $product['product_master_id'],                        'product_code' => $product['product_code'],                         'product_name' => $product['name'],                         'unit' => $product['unit'],                        'warehouse' => $warehouse['name'],                        'document_unit_id' => $detail['unit_id'],                        'document_qty' => 1,                        'unit_conversion' => 1,                        'base_unit_id' => $detail['unit_id'],                        'base_qty' => 1,                        'document_rate' => $cost_price,                        'document_amount' => $cost_price,                        'base_rate' => $cost_price,                        'base_amount' => $cost_price,                        'serial_no' => $sr_no                    );                   $stock_ledger_history_id = $this->model['stock_ledger_history']->add($this->getAlias(), $stock_ledger);                }                // detail entry //                $stock_ledger = array(                    'company_id' => $detail['company_id'],                    'company_branch_id' => $detail['company_branch_id'],                    'fiscal_year_id' => $detail['fiscal_year_id'],                    'document_type_id' => $dataMaster['document_type_id'],                    'document_id' => $dataMaster['document_id'],                    'document_identity' => $dataMaster['document_identity'],                    'document_date' => $dataMaster['document_date'],                    'document_detail_id' => $stock_in_detail_id,                    'warehouse_id' => $detail['warehouse_id'],                    'product_id' => $product['product_master_id'],                    'document_unit_id' => $detail['unit_id'],                    'document_qty' => $detail['qty'],                    'unit_conversion' => 1,                    'base_unit_id' => $detail['unit_id'],                    'base_qty' => $detail['qty'],                    'document_rate' => ($detail['unit_price']),                    'document_amount' => ($detail['qty'] * $detail['unit_price']),                    'base_rate' => $detail['unit_price'],                    'base_amount' => ($detail['qty'] * $detail['unit_price'])                );                $stock_ledger_id = $this->model['stock_ledger']->add($this->getAlias(), $stock_ledger);            }            $this->model[$this->getAlias()] = $this->load->model($this->getAlias());            $this->model[$this->getAlias()]->edit($this->getAlias(),$this->request->get[$this->getPrimaryKey()],$data);            $this->model['document'] = $this->load->model('common/document');            $this->model['document']->edit($this->getAlias(),$this->request->get[$this->getPrimaryKey()],$data);        }        $this->redirect($this->url->link($this->getAlias(), 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $this->request->get[$this->getPrimaryKey()], 'SSL'));    }    public function getProductJson() {        $search = $this->request->post['q'];        $page = $this->request->post['page'];        $this->model['product'] = $this->load->model('inventory/product');        $rows = $this->model['product']->getProductJson($search, $page);        echo json_encode($rows);    }    public function getProductSerialNo() {        $product_code = $this->request->post['product_code'];        $this->model['product'] = $this->load->model('inventory/product');        $product_serial_no = $this->model['product']->getProductSerialNo();        echo $product_serial_no;    }    // public function getPurchaseOrder() {    //     $stock_in_id = $this->request->get['stock_in_id'];    //     $post = $this->request->post;    //     //Purchase Order    //     $this->model['purchase_order'] = $this->load->model('inventory/purchase_order');    //     $where = "company_id=" . $this->session->data['company_id'];    //     $where .= " AND company_branch_id='" . $this->session->data['company_branch_id'] . "'";    //     $where .= " AND fiscal_year_id=" . $this->session->data['fiscal_year_id'];    //     $where .= " AND partner_type_id='" . $post['partner_type_id'] . "'";    //     $where .= " AND partner_id='" . $post['partner_id'] . "'";    //     // $where .= " AND LOWER(`invoice_type`)='import'";    //     $purchase_orders = $this->model['purchase_order']->getPurchaseOrders($where,$stock_in_id);    //     foreach($purchase_orders as $purchase_order_id => $purchase_order) {    //         foreach($purchase_order['products'] as $product_id => $product) {    //             if($product['order_qty'] <= $product['utilized_qty']) {    //                 unset($purchase_order['products'][$product_id]);    //             }    //         }    //         if(empty($purchase_order['products'])) {    //             unset($purchase_orders[$purchase_order_id]);    //         }    //     }    //     $html = "";    //     if(count($purchase_orders) != 1) {    //         $html .= '<option value="">&nbsp;</option>';    //     }    //     foreach($purchase_orders as $purchase_order_id => $purchase_order) {    //         if($purchase_order['manual_ref_no']=='') {    //             if($purchase_order['purchase_order_id']==$post['ref_document_id']) {    //                 $html .= '<option value="'.$purchase_order_id.'" selected="true">'.$purchase_order['document_identity'].'</option>';    //             } else {    //                 $html .= '<option value="'.$purchase_order_id.'">'.$purchase_order['document_identity'].'</option>';    //             }    //         } else {    //             if($purchase_order['purchase_order_id']==$post['ref_document_id']) {    //                 $html .= '<option value="'.$purchase_order_id.'" selected="true">'.$purchase_order['document_identity']. '</option>';    //             } else {    //                 $html .= '<option value="'.$purchase_order_id.'">'.$purchase_order['document_identity']. '</option>';    //             }    //         }    //     }    //     $json = array(    //         'success' => true,    //         'stock_in_id' => $stock_in_id,    //         'post' => $post,    //         'where' => $where,    //         'html' => $html    //     );    //     echo json_encode($json);    // }    // public function getGoodsReceived()    // {    //     $stock_in_id = $this->request->get['stock_in_id'];    //     $post = $this->request->post;    //     //Good Received    //     $this->model['goods_received'] = $this->load->model('inventory/goods_received');    //     $where = "company_id=" . $this->session->data['company_id'];    //     $where .= " AND company_branch_id='" . $this->session->data['company_branch_id'] . "'";    //     $where .= " AND fiscal_year_id=" . $this->session->data['fiscal_year_id'];    //     $where .= " AND partner_type_id='" . $post['partner_type_id'] . "'";    //     $where .= " AND partner_id='" . $post['partner_id'] . "'";    //     $goods_receiveds = $this->model['goods_received']->getGoodsReceiveds($where,$stock_in_id);    //     // d($this->model['purchase_order_detail']->getRows(), true);    //     foreach($goods_receiveds as $goods_received_id => $goods_received) {    //         foreach($goods_received['products'] as $product_id => $product) {    //             if($product['order_qty'] <= $product['utilized_qty']) {    //                 unset($goods_received['products'][$product_id]);    //             }    //         }    //         if(empty($goods_received['products'])) {    //             unset($goods_receiveds[$goods_received_id]);    //         }    //     }    //     $html = "";    //     if(count($goods_receiveds) != 1) {    //         $html .= '<option value="">&nbsp;</option>';    //     }    //     // d($goods_receiveds, true);    //     foreach($goods_receiveds as $goods_received_id => $goods_received) {    //         if($goods_received['manual_ref_no']=='') {    //             if($goods_received['goods_received_id']==$post['ref_document_id']) {    //                 $html .= '<option value="'.$goods_received_id.'" selected="true">'.$goods_received['document_po_no'].'</option>';    //             } else {    //                 $html .= '<option value="'.$goods_received_id.'">'.$goods_received['document_po_no'].'</option>';    //             }    //         } else {    //             if($goods_received['goods_received_id']==$post['ref_document_id']) {    //                 $html .= '<option value="'.$goods_received_id.'" selected="true">'.$goods_received['document_identity']. '</option>';    //             } else {    //                 $html .= '<option value="'.$goods_received_id.'">'.$goods_received['document_identity']. '</option>';    //             }    //         }    //     }    //     $json = array(    //         'success' => true,    //         'stock_in_id' => $stock_in_id,    //         'post' => $post,    //         'where' => $where,    //         'html' => $html    //     );    //     echo json_encode($json);    // }    // public function getReferenceDocument() {    //     $stock_in_id = $this->request->get['stock_in_id'];    //     $post = $this->request->post;    //     $this->model['product'] = $this->load->model('inventory/product');    //     if( $post['ref_document_type_id'] == 4 )    //     {    //         //Purchase Order    //         $this->model['purchase_order'] = $this->load->model('inventory/purchase_order');    //         $where = "company_id=" . $this->session->data['company_id'];    //         $where .= " AND company_branch_id='" . $this->session->data['company_branch_id'] . "'";    //         $where .= " AND fiscal_year_id=" . $this->session->data['fiscal_year_id'];    //         $where .= " AND partner_id='" . $post['partner_id'] . "'";    //         $where .= " AND document_identity='" . $post['ref_document_identity'] . "'";    //         $purchase_orders = $this->model['purchase_order']->getPurchaseOrders($where,$stock_in_id);    //         $purchase_order = $purchase_orders[$post['ref_document_identity']];    //         $PO =  $this->model['purchase_order']->getRow(array('document_identity' => $post['ref_document_identity']));    //         $this->model['currency'] = $this->load->model('setup/currency');    //         $currencies = $this->model['currency']->getArrays('currency_id', 'currency_code', array('company_id' => $this->session->data['company_id']));    //         $PO['document_currency_name'] = $currencies[$PO['document_currency_id']];    //         $PO['base_currency_name']     = $currencies[$PO['base_currency_id']];    //         $details = array();    //         $row_no = 0;    //         foreach($purchase_order['products'] as $product) {    //             if($product['order_qty'] - $product['utilized_qty'] > 0)    //             {    //                 $type_of_material = $this->model['product']->getRow(array('product_id' => $product['product_id']));    //                 $href = $this->url->link('inventory/purchase_order/update', 'token=' . $this->session->data['token'] . '&purchase_order_id=' . $purchase_order['purchase_order_id']);    //                 $details[$row_no] = $product;    //                 $details[$row_no]['ref_document_identity'] = $purchase_order['document_identity'];    //                 $details[$row_no]['row_identity'] = $purchase_order['document_identity'].'-'.$product['product_code'];    //                 $details[$row_no]['href'] = $href;    //                 $details[$row_no]['balanced_qty'] = ($product['order_qty'] - $product['utilized_qty']);    //                 $details[$row_no]['utilized_qty'] = ($product['order_qty'] - $product['utilized_qty']);    //                 $details[$row_no]['type_of_material'] = $type_of_material['type_of_material'];    //                 $row_no++;    //             }    //         }    //         //        d($details,true);    //         $purchase_order['products'] = $details;    //         $json = array(    //             'success' => true,    //             'stock_in_id' => $stock_in_id,    //             'post' => $post,    //             'data' => $purchase_order,    //             'po' => $PO    //         );    //         echo json_encode($json);    //     }    //     else if( $post['ref_document_type_id'] == 17 )    //     {    //         //Goods Received    //         $this->model['goods_received'] = $this->load->model('inventory/goods_received');    //         $where = "company_id=" . $this->session->data['company_id'];    //         $where .= " AND company_branch_id='" . $this->session->data['company_branch_id'] . "'";    //         $where .= " AND fiscal_year_id=" . $this->session->data['fiscal_year_id'];    //         $where .= " AND partner_id='" . $post['partner_id'] . "'";    //         $where .= " AND document_identity='" . $post['ref_document_identity'] . "'";    //         $goods_receiveds = $this->model['goods_received']->getGoodsReceiveds($where,$stock_in_id);    //         $goods_received = $goods_receiveds[$post['ref_document_identity']];    //         // d($goods_received, true);             //         $PO =  $this->model['goods_received']->getRow(array('document_identity' => $post['ref_document_identity']));    //         $this->model['currency'] = $this->load->model('setup/currency');    //         $currencies = $this->model['currency']->getArrays('currency_id', 'currency_code', array('company_id' => $this->session->data['company_id']));    //         $PO['document_currency_name'] = $currencies[$PO['document_currency_id']];    //         $PO['base_currency_name']     = $currencies[$PO['base_currency_id']];    //         $this->model['purchase_order_detail'] = $this->load->model('inventory/purchase_order_detail');    //         $details = array();    //         $row_no = 0;    //         foreach($goods_received['products'] as $product) {    //             if($product['order_qty'] - $product['utilized_qty'] > 0)    //             {    //                 $type_of_material = $this->model['product']->getRow(array('product_id' => $product['product_id']));    //                 $purchase_order_detail = $this->model['purchase_order_detail']->getRow(['purchase_order_detail_id' => $product['purchase_order_detail_id']]);    //                 $href = $this->url->link('inventory/goods_received/update', 'token=' . $this->session->data['token'] . '&purchase_order_id=' . $goods_received['purchase_order_id']);    //                 $details[$row_no] = $product;    //                 $details[$row_no]['ref_document_identity'] = $goods_received['document_identity'];    //                 $details[$row_no]['row_identity'] = $goods_received['document_identity'].'-'.$product['product_code'];    //                 $details[$row_no]['href'] = $href;    //                 $details[$row_no]['balanced_qty'] = ($product['order_qty'] - $product['utilized_qty']);    //                 $details[$row_no]['utilized_qty'] = ($product['order_qty'] - $product['utilized_qty']);    //                 $details[$row_no]['tax_percent'] = $purchase_order_detail['tax_percent'];    //                 $details[$row_no]['tax_amount'] = $purchase_order_detail['tax_amount'];    //                 $details[$row_no]['type_of_material'] = $type_of_material['type_of_material'];    //                 $row_no++;    //             }    //         }    //         $goods_received['products'] = $details;    //         // d($goods_received,true);    //         $json = array(    //             'success' => true,    //             'stock_in_id' => $stock_in_id,    //             'post' => $post,    //             'data' => $goods_received,    //             'po' => $PO    //         );    //         echo json_encode($json);    //     }    // }    // public function printDocumentExcel()    // {    //     ini_set('max_execution_time',0);    //     ini_set('memory_limit',-1);    //     $lang = $this->load->language($this->getAlias());    //     $post = $this->request->post;    //     $session = $this->session->data;    //     $stock_in_id = $this->request->get['stock_in_id'];    //     $this->model['stock_in'] = $this->load->model('inventory/stock_in');    //     $this->model['stock_in_detail'] = $this->load->model('inventory/stock_in_detail');    //     $invoice = $this->model['stock_in']->getRow(array('stock_in_id' => $stock_in_id));    //     $rows = $this->model['stock_in_detail']->getRows(array('stock_in_id' => $stock_in_id), array('sort_order'));    //     $po = $this->model['stock_in_detail']->getRow(array('stock_in_id' => $stock_in_id), array('product_name'));    //     $this->model['stock_in_expense'] = $this->load->model('inventory/stock_in_expense');    //     $expenses = $this->model['stock_in_expense']->getRows(array('stock_in_id' => $stock_in_id));    //     $this->model['stock_in_sales_tax'] = $this->load->model('inventory/stock_in_sales_tax');    //     $sales_tax = $this->model['stock_in_sales_tax']->getRows(array('stock_in_id' => $stock_in_id));    //     $objPHPExcel = new PHPExcel();    //     $objPHPExcel->setActiveSheetIndex(0);    //     $rowCount = 1;    //     $objPHPExcel->getActiveSheet()->mergeCells('A'.$rowCount.':Z'.$rowCount);    //     $objPHPExcel->getActiveSheet()->setCellValue('A'.$rowCount,$session['company_name']);    //     $objPHPExcel->getActiveSheet()->getStyle('A'.$rowCount.':Z'.$rowCount)->applyFromArray(    //         array(    //             'alignment' => array(    //                 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,    //             ),    //             'fill' => array(    //                 'type' => PHPExcel_Style_Fill::FILL_SOLID,    //                 'color' => array('rgb' => 'ebebeb')    //             ),    //             'font' => array(    //                 'bold' => true,    //                 'size' => 20    //             )    //         )    //     );    //     $rowCount++;    //     $objPHPExcel->getActiveSheet()->mergeCells('A'.$rowCount.':Z'.$rowCount);    //     $objPHPExcel->getActiveSheet()->setCellValue('A'.$rowCount, 'Purchase Invoice');    //     $objPHPExcel->getActiveSheet()->getStyle('A'.$rowCount.':Z'.$rowCount)->applyFromArray(    //         array(    //             'alignment' => array(    //                 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,    //             ),    //             'fill' => array(    //                 'type' => PHPExcel_Style_Fill::FILL_SOLID,    //                 'color' => array('rgb' => 'ebebeb')    //             ),    //             'font' => array(    //                 'bold' => true,    //                 'size' => 20    //             )    //         )    //     );    //     $rowCount+=2;    //     $objPHPExcel->getActiveSheet()->setCellValue('A'.$rowCount, 'Document No.');    //     $objPHPExcel->getActiveSheet()->getStyle('A'.$rowCount)->applyFromArray(    //         array(    //             'font' => array(    //                 'bold' => true    //             )    //         )    //     );    //     $objPHPExcel->getActiveSheet()->setCellValue('B'.$rowCount, $invoice['document_identity']);    //     $objPHPExcel->getActiveSheet()->getStyle('B'.$rowCount)->applyFromArray(    //         array(    //             'font' => array(    //                 'bold' => true    //             ),    //             'borders' => array(    //                 'bottom' => array(    //                     'style' => PHPExcel_Style_Border::BORDER_THIN    //                 )    //             )    //         )    //     );    //     $objPHPExcel->getActiveSheet()->setCellValue('C'.$rowCount, 'Document Date');    //     $objPHPExcel->getActiveSheet()->getStyle('C'.$rowCount)->applyFromArray(    //         array(    //             'font' => array(    //                 'bold' => true    //             )    //         )    //     );    //     $objPHPExcel->getActiveSheet()->setCellValue('D'.$rowCount, stdDate($invoice['document_date']));    //     $objPHPExcel->getActiveSheet()->getStyle('D'.$rowCount)->applyFromArray(    //         array(    //             'font' => array(    //                 'bold' => true    //             ),    //             'borders' => array(    //                 'bottom' => array(    //                     'style' => PHPExcel_Style_Border::BORDER_THIN    //                 )    //             )    //         )    //     );    //     $objPHPExcel->getActiveSheet()->setCellValue('E'.$rowCount, 'Po No.');    //     $objPHPExcel->getActiveSheet()->getStyle('E'.$rowCount)->applyFromArray(    //         array(    //             'font' => array(    //                 'bold' => true    //             )    //         )    //     );    //     $objPHPExcel->getActiveSheet()->setCellValue('F'.$rowCount, $po['ref_document_identity']);    //     $objPHPExcel->getActiveSheet()->getStyle('F'.$rowCount)->applyFromArray(    //         array(    //             'font' => array(    //                 'bold' => true    //             ),    //             'borders' => array(    //                 'bottom' => array(    //                     'style' => PHPExcel_Style_Border::BORDER_THIN    //                 )    //             )    //         )    //     );    //     $rowCount+=2;    //     $objPHPExcel->getActiveSheet()->setCellValue('A'.$rowCount, 'Supplier');    //     $objPHPExcel->getActiveSheet()->getStyle('A'.$rowCount)->applyFromArray(    //         array(    //             'font' => array(    //                 'bold' => true    //             )    //         )    //     );    //     $objPHPExcel->getActiveSheet()->mergeCells('B'.$rowCount.':F'.$rowCount);    //     $objPHPExcel->getActiveSheet()->setCellValue('B'.$rowCount, $invoice['partner_name']);    //     $objPHPExcel->getActiveSheet()->getStyle('B'.$rowCount.':F'.$rowCount)->applyFromArray(    //         array(    //             'font' => array(    //                 'bold' => true    //             ),    //             'borders' => array(    //                 'bottom' => array(    //                     'style' => PHPExcel_Style_Border::BORDER_THIN    //                 )    //             )    //         )    //     );    //     $rowCount++;    //     $objPHPExcel->getActiveSheet()->setCellValue('A'.$rowCount, 'Remarks');    //     $objPHPExcel->getActiveSheet()->getStyle('A'.$rowCount)->applyFromArray(    //         array(    //             'font' => array(    //                 'bold' => true    //             )    //         )    //     );    //     $objPHPExcel->getActiveSheet()->mergeCells('B'.$rowCount.':F'.$rowCount);    //     $objPHPExcel->getActiveSheet()->setCellValue('B'.$rowCount, $invoice['remarks']);    //     $objPHPExcel->getActiveSheet()->getStyle('B'.$rowCount.':F'.$rowCount)->applyFromArray(    //         array(    //             'font' => array(    //                 'bold' => true    //             ),    //             'borders' => array(    //                 'bottom' => array(    //                     'style' => PHPExcel_Style_Border::BORDER_THIN    //                 )    //             )    //         )    //     );    //     $rowCount+=2;    //     $objPHPExcel->getActiveSheet()->mergeCells('I'.$rowCount.':J'.$rowCount);    //     $objPHPExcel->getActiveSheet()->setCellValue('I'.$rowCount, $invoice['document_currency_name']);    //     $objPHPExcel->getActiveSheet()->getStyle('I'.$rowCount.':J'.$rowCount)->applyFromArray(    //         array(    //             'alignment' => array(    //                 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,    //             ),    //             'font' => array(    //                 'bold' => true    //             ),    //             'borders' => array(    //                 'allborders' => array(    //                     'style' => PHPExcel_Style_Border::BORDER_THIN    //                 )    //             )    //         )    //     );    //     $objPHPExcel->getActiveSheet()->mergeCells('K'.$rowCount.':L'.$rowCount);    //     $objPHPExcel->getActiveSheet()->setCellValue('K'.$rowCount, 'PKR');    //     $objPHPExcel->getActiveSheet()->getStyle('K'.$rowCount.':L'.$rowCount)->applyFromArray(    //         array(    //             'alignment' => array(    //                 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,    //             ),    //             'font' => array(    //                 'bold' => true    //             ),    //             'borders' => array(    //                 'allborders' => array(    //                     'style' => PHPExcel_Style_Border::BORDER_THIN    //                 )    //             )    //         )    //     );    //     $objPHPExcel->getActiveSheet()->mergeCells('M'.$rowCount.':Z'.$rowCount);    //     $objPHPExcel->getActiveSheet()->setCellValue('M'.$rowCount, 'LANDED COST WORKING');    //     $objPHPExcel->getActiveSheet()->getStyle('M'.$rowCount.':Z'.$rowCount)->applyFromArray(    //         array(    //             'alignment' => array(    //                 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,    //             ),    //             'font' => array(    //                 'bold' => true    //             ),    //             'borders' => array(    //                 'allborders' => array(    //                     'style' => PHPExcel_Style_Border::BORDER_THIN    //                 )    //             )    //         )    //     );    //     $rowCount++;    //     $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(20);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(20);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(20);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(20);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(20);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(15);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(15);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(15);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(15);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('M')->setWidth(15);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('N')->setWidth(15);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('O')->setWidth(20);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('P')->setWidth(20);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('Q')->setWidth(20);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('R')->setWidth(15);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('S')->setWidth(15);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('T')->setWidth(15);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('U')->setWidth(15);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('V')->setWidth(15);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('W')->setWidth(20);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('X')->setWidth(20);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('Y')->setWidth(20);    //     $objPHPExcel->getActiveSheet()->getColumnDimension('z')->setWidth(15);    //     $objPHPExcel->getActiveSheet()->setCellValue('A'.$rowCount, 'SNo.');    //     $objPHPExcel->getActiveSheet()->setCellValue('B'.$rowCount, 'Description');    //     $objPHPExcel->getActiveSheet()->setCellValue('C'.$rowCount, 'Serial No');    //     $objPHPExcel->getActiveSheet()->setCellValue('D'.$rowCount, 'Batch No');    //     $objPHPExcel->getActiveSheet()->setCellValue('E'.$rowCount, 'Stock Unit');    //     $objPHPExcel->getActiveSheet()->setCellValue('F'.$rowCount, 'Warehoues');    //     $objPHPExcel->getActiveSheet()->setCellValue('G'.$rowCount, 'Qty');    //     $objPHPExcel->getActiveSheet()->setCellValue('H'.$rowCount, 'Unit Price');    //     $objPHPExcel->getActiveSheet()->setCellValue('I'.$rowCount, 'Total Price');    //     $objPHPExcel->getActiveSheet()->setCellValue('J'.$rowCount, 'Total Price PKR');    //     $objPHPExcel->getActiveSheet()->setCellValue('K'.$rowCount, 'Unit Price PKR');    //     $objPHPExcel->getActiveSheet()->setCellValue('L'.$rowCount, 'Custom Duty');    //     $objPHPExcel->getActiveSheet()->setCellValue('M'.$rowCount, 'Add. Custom Duty');    //     $objPHPExcel->getActiveSheet()->setCellValue('N'.$rowCount, 'Regulatory Duty');    //     $objPHPExcel->getActiveSheet()->setCellValue('O'.$rowCount, 'Sales Tax Percent');    //     $objPHPExcel->getActiveSheet()->setCellValue('P'.$rowCount, 'Sales Tax');    //     $objPHPExcel->getActiveSheet()->setCellValue('Q'.$rowCount, 'Add. Sales Tax');    //     $objPHPExcel->getActiveSheet()->setCellValue('R'.$rowCount, 'Income Tax');    //     $objPHPExcel->getActiveSheet()->setCellValue('S'.$rowCount, 'Other Duties');    //     $objPHPExcel->getActiveSheet()->setCellValue('T'.$rowCount, 'Other Expense');    //     $objPHPExcel->getActiveSheet()->setCellValue('U'.$rowCount, 'Total Duties & Charges');    //     $objPHPExcel->getActiveSheet()->setCellValue('V'.$rowCount, 'Total Landed Cost');    //     $objPHPExcel->getActiveSheet()->setCellValue('W'.$rowCount, 'Net Unit Cost');    //     $objPHPExcel->getActiveSheet()->setCellValue('X'.$rowCount, 'Add. Unit Cost');    //     $objPHPExcel->getActiveSheet()->getStyle('A'.$rowCount.':X'.$rowCount)->applyFromArray(    //         array(    //             'alignment' => array(    //                 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,    //             ),    //             'font' => array(    //                 'bold' => true    //             ),    //             'borders' => array(    //                 'allborders' => array(    //                     'style' => PHPExcel_Style_Border::BORDER_THIN    //                 )    //             )    //         )    //     );    //     $rowCount++;    //     $objPHPExcel->getActiveSheet()->mergeCells('A'.$rowCount.':M'.$rowCount);    //     $objPHPExcel->getActiveSheet()->setCellValue('A'.$rowCount, 'LANDED COST AND PROFIT WORKING WITH GST & REFUNDS');    //     $objPHPExcel->getActiveSheet()->getStyle('A'.$rowCount.':M'.$rowCount)->applyFromArray(    //         array(    //             'font' => array(    //                 'bold' => true    //             ),    //             'borders' => array(    //                 'allborders' => array(    //                     'style' => PHPExcel_Style_Border::BORDER_THIN    //                 )    //             )    //         )    //     );    //     $objPHPExcel->getActiveSheet()->mergeCells('N'.$rowCount.':Z'.$rowCount);    //     $objPHPExcel->getActiveSheet()->setCellValue('N'.$rowCount, 'EX. RATE: ' . number_format($invoice['conversion_rate'],2));    //     $objPHPExcel->getActiveSheet()->getStyle('N'.$rowCount.':Z'.$rowCount)->applyFromArray(    //         array(    //             'font' => array(    //                 'bold' => true    //             ),    //             'borders' => array(    //                 'allborders' => array(    //                     'style' => PHPExcel_Style_Border::BORDER_THIN    //                 )    //             )    //         )    //     );    //     $rowCount+=2;    //     $sr = 1;    //     // d($rows, true);    //     foreach($rows as $detail){    //         $objPHPExcel->getActiveSheet()->setCellValue('A'.$rowCount, ($sr++));    //         $objPHPExcel->getActiveSheet()->setCellValue('B'.$rowCount, $detail['description']);    //         $objPHPExcel->getActiveSheet()->setCellValue('C'.$rowCount, $detail['serial_no']);    //         $objPHPExcel->getActiveSheet()->setCellValue('D'.$rowCount, $detail['batch_no']);    //         $objPHPExcel->getActiveSheet()->setCellValue('E'.$rowCount, $detail['unit']);    //         $objPHPExcel->getActiveSheet()->setCellValue('F'.$rowCount, $detail['warehouse']);    //         $objPHPExcel->getActiveSheet()->setCellValue('G'.$rowCount, $detail['qty']);    //         $objPHPExcel->getActiveSheet()->setCellValue('H'.$rowCount, $detail['unit_price']);    //         $objPHPExcel->getActiveSheet()->setCellValue('I'.$rowCount, $detail['total_price']);    //         $objPHPExcel->getActiveSheet()->setCellValue('J'.$rowCount, $detail['total_price_pkr']);    //         $objPHPExcel->getActiveSheet()->setCellValue('K'.$rowCount, $detail['unit_price_pkr']);    //         $objPHPExcel->getActiveSheet()->setCellValue('L'.$rowCount, $detail['custom_duty']);    //         $objPHPExcel->getActiveSheet()->setCellValue('M'.$rowCount, $detail['additional_custom_duty']);    //         $objPHPExcel->getActiveSheet()->setCellValue('N'.$rowCount, $detail['regulatory_duty']);    //         $objPHPExcel->getActiveSheet()->setCellValue('O'.$rowCount, $detail['sales_tax_percent']);    //         $objPHPExcel->getActiveSheet()->setCellValue('P'.$rowCount, $detail['sales_tax']);    //         $objPHPExcel->getActiveSheet()->setCellValue('Q'.$rowCount, $detail['additional_sales_tax']);    //         $objPHPExcel->getActiveSheet()->setCellValue('R'.$rowCount, $detail['income_tax']);    //         $objPHPExcel->getActiveSheet()->setCellValue('S'.$rowCount, $detail['total_duties_and_charges']);    //         $objPHPExcel->getActiveSheet()->setCellValue('T'.$rowCount, $detail['other_expense_and_charges']);    //         $objPHPExcel->getActiveSheet()->setCellValue('U'.$rowCount, $detail['total_other_duties_and_charges']);    //         $objPHPExcel->getActiveSheet()->setCellValue('V'.$rowCount, $detail['total_landed_cost']);    //         $objPHPExcel->getActiveSheet()->setCellValue('W'.$rowCount, $detail['net_unit_cost']);    //         $objPHPExcel->getActiveSheet()->setCellValue('X'.$rowCount, $detail['additional_unit_cost']);    //         $objPHPExcel->getActiveSheet()->getStyle('A'.$rowCount.':Z'.$rowCount)->applyFromArray(    //             array(    //                 'borders' => array(    //                     'allborders' => array(    //                         'style' => PHPExcel_Style_Border::BORDER_THIN    //                     )    //                 )    //             )    //         );    //         $rowCount++;    //     }    //     $rowCount++;    //     $objPHPExcel->getActiveSheet()->mergeCells('A'.$rowCount.':F'.$rowCount);    //     $objPHPExcel->getActiveSheet()->setCellValue('A'.$rowCount, 'Total');    //     $objPHPExcel->getActiveSheet()->setCellValue('G'.$rowCount, $invoice['qty_master']);    //     $objPHPExcel->getActiveSheet()->setCellValue('H'.$rowCount, $invoice['calc_weight_master']);    //     $objPHPExcel->getActiveSheet()->setCellValue('I'.$rowCount, $invoice['total_price_master']);    //     $objPHPExcel->getActiveSheet()->setCellValue('J'.$rowCount, $invoice['total_price_pkr_master']);    //     $objPHPExcel->getActiveSheet()->setCellValue('K'.$rowCount, $invoice['custom_duty_master']);    //     $objPHPExcel->getActiveSheet()->setCellValue('L'.$rowCount, $invoice['additional_custom_duty_master']);    //     $objPHPExcel->getActiveSheet()->setCellValue('M'.$rowCount, $invoice['regulatory_duty_master']);    //     $objPHPExcel->getActiveSheet()->setCellValue('P'.$rowCount, $invoice['sales_tax_master']);    //     $objPHPExcel->getActiveSheet()->setCellValue('Q'.$rowCount, $invoice['additional_sales_tax_master']);    //     $objPHPExcel->getActiveSheet()->setCellValue('R'.$rowCount, $invoice['income_tax_master']);    //     $objPHPExcel->getActiveSheet()->setCellValue('S'.$rowCount, $invoice['total_duties_master']);    //     $objPHPExcel->getActiveSheet()->setCellValue('T'.$rowCount, $invoice['total_other_expense_master']);    //     $objPHPExcel->getActiveSheet()->setCellValue('U'.$rowCount, $invoice['total_other_duties_master']);    //     $objPHPExcel->getActiveSheet()->setCellValue('V'.$rowCount, $invoice['total_landed_cost_master']);    //     $objPHPExcel->getActiveSheet()->getStyle('A'.$rowCount.':Z'.$rowCount)->applyFromArray(    //         array(    //             'alignment' => array(    //                 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,    //             ),    //             'borders' => array(    //                 'allborders' => array(    //                     'style' => PHPExcel_Style_Border::BORDER_THIN    //                 )    //             ),    //             'fill' => array(    //                 'type' => PHPExcel_Style_Fill::FILL_SOLID,    //                 'color' => array('rgb' => 'ebebeb')    //             ),    //             'font' => array(    //                 'bold' => true    //             )    //         )    //     );    //     $rowCount+=3;    //     $objPHPExcel->getActiveSheet()->setCellValue('A'.$rowCount, 'SNo.');    //     $objPHPExcel->getActiveSheet()->mergeCells('B'.$rowCount.':D'.$rowCount);    //     $objPHPExcel->getActiveSheet()->setCellValue('B'.$rowCount, 'Other Shipment Expenses');    //     $objPHPExcel->getActiveSheet()->setCellValue('E'.$rowCount, 'Amount');    //     $objPHPExcel->getActiveSheet()->getStyle('A'.$rowCount.':E'.$rowCount)->applyFromArray(    //         array(    //             'alignment' => array(    //                 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,    //             ),    //             'font' => array(    //                 'bold' => true    //             ),    //             'borders' => array(    //                 'allborders' => array(    //                     'style' => PHPExcel_Style_Border::BORDER_THIN    //                 )    //             )    //         )    //     );    //     $sr=1;    //     $rowCount++;    //     $total = 0;    //     foreach ($expenses as $expense) {    //         $objPHPExcel->getActiveSheet()->setCellValue('A'.$rowCount, ($sr++));    //         $objPHPExcel->getActiveSheet()->mergeCells('B'.$rowCount.':D'.$rowCount);    //         $objPHPExcel->getActiveSheet()->setCellValue('B'.$rowCount, $expense['description']);    //         $objPHPExcel->getActiveSheet()->setCellValue('E'.$rowCount, $expense['expense_amount']);    //         $objPHPExcel->getActiveSheet()->getStyle('A'.$rowCount.':E'.$rowCount)->applyFromArray(    //             array(    //                 'borders' => array(    //                     'allborders' => array(    //                         'style' => PHPExcel_Style_Border::BORDER_THIN    //                     )    //                 )    //             )    //         );    //         $total += $expense['expense_amount'];    //         $rowCount++;    //     }    //     // $rowCount++;    //     $objPHPExcel->getActiveSheet()->mergeCells('B'.$rowCount.':D'.$rowCount);    //     $objPHPExcel->getActiveSheet()->setCellValue('B'.$rowCount, 'Total');    //     $objPHPExcel->getActiveSheet()->setCellValue('E'.$rowCount, $total);    //     $objPHPExcel->getActiveSheet()->getStyle('B'.$rowCount.':E'.$rowCount)->applyFromArray(    //         array(    //             'alignment' => array(    //                 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,    //             ),    //             'font' => array(    //                 'bold' => true    //             ),    //             'borders' => array(    //                 'allborders' => array(    //                     'style' => PHPExcel_Style_Border::BORDER_THIN    //                 )    //             )    //         )    //     );    //     $rowCount+=3;    //     $objPHPExcel->getActiveSheet()->setCellValue('A'.$rowCount, 'SNo.');    //     $objPHPExcel->getActiveSheet()->mergeCells('B'.$rowCount.':D'.$rowCount);    //     $objPHPExcel->getActiveSheet()->setCellValue('B'.$rowCount, 'Refunds');    //     $objPHPExcel->getActiveSheet()->setCellValue('E'.$rowCount, 'Amount');    //     $objPHPExcel->getActiveSheet()->getStyle('A'.$rowCount.':E'.$rowCount)->applyFromArray(    //         array(    //             'alignment' => array(    //                 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,    //             ),    //             'font' => array(    //                 'bold' => true    //             ),    //             'borders' => array(    //                 'allborders' => array(    //                     'style' => PHPExcel_Style_Border::BORDER_THIN    //                 )    //             )    //         )    //     );    //     $sr=1;    //     $rowCount++;    //     $total = 0;    //     foreach ($sales_tax as $tax) {    //         $objPHPExcel->getActiveSheet()->setCellValue('A'.$rowCount, ($sr++));    //         $objPHPExcel->getActiveSheet()->mergeCells('B'.$rowCount.':D'.$rowCount);    //         $objPHPExcel->getActiveSheet()->setCellValue('B'.$rowCount, $tax['account']);    //         $objPHPExcel->getActiveSheet()->setCellValue('E'.$rowCount, $tax['sales_tax_amount']);    //         $objPHPExcel->getActiveSheet()->getStyle('A'.$rowCount.':E'.$rowCount)->applyFromArray(    //             array(    //                 'borders' => array(    //                     'allborders' => array(    //                         'style' => PHPExcel_Style_Border::BORDER_THIN    //                     )    //                 )    //             )    //         );    //         $total += $tax['sales_tax_amount'];    //         $rowCount++;    //     }    //     // $rowCount++;    //     $objPHPExcel->getActiveSheet()->mergeCells('B'.$rowCount.':D'.$rowCount);    //     $objPHPExcel->getActiveSheet()->setCellValue('B'.$rowCount, 'Total');    //     $objPHPExcel->getActiveSheet()->setCellValue('E'.$rowCount, $total);    //     $objPHPExcel->getActiveSheet()->getStyle('B'.$rowCount.':E'.$rowCount)->applyFromArray(    //         array(    //             'alignment' => array(    //                 'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,    //             ),    //             'font' => array(    //                 'bold' => true    //             ),    //             'borders' => array(    //                 'allborders' => array(    //                     'style' => PHPExcel_Style_Border::BORDER_THIN    //                 )    //             )    //         )    //     );    //     header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');    //     header('Content-Disposition: attachment;filename="Purchase Invoice - '. $invoice['document_identity'] .' .xlsx"');    //     header('Cache-Control: max-age=0');    //     //$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');    //     $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);    //     //$objWriter->save('some_excel_file.xlsx');    //     $objWriter->save('php://output');    //     exit;    // }    // public function printDocument() {    //     ini_set('max_execution_time',0);    //     ini_set('memory_limit',-1);    //     $lang = $this->load->language($this->getAlias());    //     $post = $this->request->post;    //     $session = $this->session->data;    //     $stock_in_id = $this->request->get['stock_in_id'];    //     $this->model['stock_in'] = $this->load->model('inventory/stock_in');    //     $this->model['stock_in_detail'] = $this->load->model('inventory/stock_in_detail');    //     $invoice = $this->model['stock_in']->getRow(array('stock_in_id' => $stock_in_id));    //     $rows = $this->model['stock_in_detail']->getRows(array('stock_in_id' => $stock_in_id), array('sort_order'));    //     $po = $this->model['stock_in_detail']->getRow(array('stock_in_id' => $stock_in_id), array('product_name'));    //     $this->model['stock_in_expense'] = $this->load->model('inventory/stock_in_expense');    //     $expenses = $this->model['stock_in_expense']->getRows(array('stock_in_id' => $stock_in_id));    //     $this->model['stock_in_sales_tax'] = $this->load->model('inventory/stock_in_sales_tax');    //     $sales_tax = $this->model['stock_in_sales_tax']->getRows(array('stock_in_id' => $stock_in_id));    //     $pdf = new PDF('L', PDF_UNIT, 'A3', true, 'UTF-8', false);    //     // set document information    //     $pdf->SetCreator(PDF_CREATOR);    //     $pdf->SetAuthor('Farrukh Afaq');    //     $pdf->SetTitle('Purchase Invoice');    //     $pdf->SetSubject('Purchase Invoice');    //     //Set Header    //     $pdf->data = array(    //         'company_name' => $session['company_name'],    //         'report_name' => 'Purchase Invoice',    //         'company_logo' => $session['company_image']    //     );    //     // set margins    //     //$pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);    //     $pdf->SetMargins(8, 30, 8);    //     $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);    //     $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);    //     // set auto page breaks    //     $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);    //     // add a page    //     $pdf->AddPage();    //     $pdf->ln(10);    //     $pdf->SetFont('freesans','B',10);    //     // d($invoice,true);    //     $pdf->Cell(15, 9, 'Po No:  ', 0, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->SetFont('freesans','',10);    //     $pdf->Cell(80, 9, $po['ref_document_identity'], 'B', false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->SetFont('freesans','B',10);    //     $pdf->Cell(28, 9, 'Document No:  ', 0, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->SetFont('freesans','',10);    //     $pdf->Cell(80, 9, $invoice['document_identity'], 'B', false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->SetFont('freesans','B',10);    //     $pdf->Cell(30, 9, 'Document Date:  ', 0, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->SetFont('freesans','',10);    //     $pdf->Cell(70, 9, stdDate($invoice['document_date']), 'B', false, 'L', 0, '', 0, false, 'M', 'M');    //     // $pdf->SetFont('freesans','B',10);    //     // $pdf->Cell(25, 9, 'Warehouse:  ', 0, false, 'L', 0, '', 0, false, 'M', 'M');    //     // $pdf->SetFont('freesans','',10);    //     // $pdf->Cell(75, 9, $invoice['warehouse'], 'B', false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(12);    //     // $pdf->SetFont('freesans','B',10);    //     // $pdf->Cell(30, 9, 'Clearing Agent:  ', 0, false, 'L', 0, '', 0, false, 'M', 'M');    //     // $pdf->SetFont('freesans','',10);    //     // $pdf->Cell(110, 9, $invoice['clearing_agents'], 'B', false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->SetFont('freesans','B',10);    //     $pdf->Cell(20, 9, 'Supplier:  ', 0, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->SetFont('freesans','',10);    //     $pdf->Cell(113, 9, $invoice['partner_name'], 'B', false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->SetFont('freesans','B',10);    //     $pdf->Cell(35, 9, 'Purchase Order #:  ', 0, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->SetFont('freesans','',10);    //     $pdf->Cell(95, 9, $invoice['remarks'], 'B', false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(14);    //     $pdf->SetFont('freesans','B',9);    //     $pdf->SetFillColor(255,254,2);    //     //$pdf->ln(16);    //     $pdf->Cell(110, 8, '', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(108, 8, $invoice['document_currency_name'], 1, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(36, 8, 'PKR', 1, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(151, 8, 'LANDED COST WORKING', 1, false, 'C', 0, '', 0, false, 'M', 'M');    //     //$pdf->ln(2);    //     $pdf->SetFillColor(204,228,187);    //     $pdf->SetCellPadding(3,3,3,3);    //     $pdf->MultiCell(10,12,'S#',1,'C',0,0,8,70);    //     $pdf->MultiCell(100,12,'Description',1,'C',0,0,18,70);    //     $pdf->MultiCell(18,12,'Qty',1,'C',0,0,118,70);    //     $pdf->SetCellPadding(2,2,2,2);    //     $pdf->MultiCell(18,12,'Unit Price',1,'C',0,0,136,70);    //     $pdf->MultiCell(18,12,'Total Price',1,'C',0,0,154,70);    //     $pdf->MultiCell(54,12,'Project',1,'C',0,0,172,70);    //     $pdf->SetCellPadding(0,0,0,0);    //     // $pdf->MultiCell(18,12,'PO Freight Charges',1,'C',0,0,190,70);    //     $pdf->SetCellPadding(2,2,2,2);    //     // $pdf->MultiCell(18,12,'Net Price',1,'C',0,0,208,70);    //     $pdf->MultiCell(18,12,'Total Price',1,'C',0,0,226,70);    //     $pdf->MultiCell(18,12,'Unit Price',1,'C',0,0,244,70);    //     $pdf->MultiCell(18,12,'Freight',1,'C',0,0,262,70);    //     $pdf->MultiCell(18,12,'Custom Duty',1,'C',0,0,280,70);    //     $pdf->MultiCell(20,12,'Income Tax',1,'C',0,0,298,70);    //     $pdf->MultiCell(25,12,'Other Duties & Charges',1,'C',0,0,318,70);    //     $pdf->MultiCell(23,12,'Total Duties & Charges',1,'C',0,0,343,70);    //     $pdf->MultiCell(24,12,'Total Landed Cost',1,'C',0,0,366,70);    //     $pdf->MultiCell(23,12,'Net Unit Cost',1,'C',0,0,390,70);    //     $pdf->ln(17);    //     $pdf->SetFillColor(194,209,232);    //     $pdf->Cell(218, 8, 'LANDED COST AND PROFIT WORKING WITH GST & REFUNDS', 0, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(18, 8, 'EX. RATE', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(18, 8, number_format($invoice['conversion_rate'],2), 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(8);    //     $sr = 0;    //     foreach($rows as $detail){    //         //d($rows,true);    //         $sr++;    //         $pdf->SetFillColor(221,234,243);    //         $pdf->SetFont('freesans','',9);    //         $pdf->Cell(10, 8, $sr, 1, false, 'C', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(100, 8, html_entity_decode($detail['product_code'].' -( '.$detail['product_name'].' )'), 1, false, 'L', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(18, 8, $detail['qty'], 1, false, 'R',0, '', 0, false, 'M', 'M');    //         $pdf->Cell(18, 8, $detail['unit_price'], 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(18, 8, $detail['total_price'], 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(18, 8, $detail['cip_packing'], 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(18, 8, $detail['po_freight'], 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(18, 8, number_format($detail['net_price'],2), 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(18, 8, number_format($detail['total_price_pkr'],0), 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(18, 8, number_format($detail['total_price_pkr'] / $detail['qty'],0), 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(18, 8, number_format($detail['freight_charges'],0), 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(18, 8, number_format($detail['custom_duty'],0), 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(20, 8, number_format($detail['income_tax'],0), 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(25, 8, number_format($detail['other_duties_and_charges'],0), 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(23, 8, number_format($detail['total_duties_and_charges'],0), 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(24, 8, number_format($detail['total_landed_cost'],0), 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(23, 8, $detail['net_unit_cost'], 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->ln(8);    //         $this->model['product']= $this->load->model('inventory/product');    //         $products = $this->model['product']->getRows(array('product_id' => $detail['product_id']));    //     }    //     $pdf->Cell(110, 8, 'TOTAL VALUE', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(18, 8, $invoice['qty_master'], 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(18, 8, '', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(18, 8, $invoice['total_price_master'], 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(18, 8, $invoice['cip_packing_master'], 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(18, 8, $invoice['po_freight_master'], 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(18, 8, $invoice['net_price_master'], 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(18, 8, number_format($invoice['total_price_pkr_master'],0), 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(18, 8, '', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(18, 8, number_format($invoice['freight_master'],0), 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(18, 8, number_format($invoice['custom_duty_master'],0), 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(20, 8, number_format($invoice['income_tax_master'],0), 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(25, 8, number_format($invoice['other_duties_master'],0), 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(25, 8, number_format($invoice['total_duties_master'],0), 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(25, 8, number_format($invoice['total_landed_cost_master'],0), 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(8);    //     $sr_sales = 0;    //     $pdf->SetFont('freesans','B',9);    //     $pdf->SetFillColor(194,209,232);    //     $pdf->Cell(130, 8, 'SALES TAX REFUNDS', 0, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(6);    //     foreach($sales_tax as $tax){    //         $sr_sales++;    //         $pdf->SetFillColor(221,234,243);    //         $pdf->SetFont('freesans','',9);    //         $pdf->Cell(10, 8, $sr_sales, 1, false, 'C', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(100, 8, html_entity_decode($tax['account']), 1, false, 'L', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(20, 8, number_format($tax['sales_tax_amount'],0), 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->ln(8);    //     }    //     $pdf->SetFillColor(221,234,243);    //     $pdf->SetFont('freesans','B',9);    //     $pdf->Cell(10, 8, '', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(100, 8,'TOTAL REFUND', 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(20, 8, number_format($invoice['sales_tax_total'],0), 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(10);    //     // $pdf->SetFont('freesans','B',9);    //     // $pdf->Cell(110, 8, 'TOTAL REFUND', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     // $pdf->Cell(20, 8, number_format($invoice['sales_tax_total'],0), 0, false, 'R', 0, '', 0, false, 'M', 'M');    //     //ib    //     // $pdf->SetFont('freesans','B',9);    //     $pdf->SetFillColor(194,209,232);    //     $pdf->Cell(130, 8, 'CUSTOM DUTY & INCOME TAX', 0, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(6);    //     $pdf->SetFont('freesans','',9);    //     $pdf->Cell(10, 8, 1, 1, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(100, 8, html_entity_decode('CUSTOM DUTY '), 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(20, 8, number_format($invoice['custom_duty_master'],0), 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(8);    //     $pdf->Cell(10, 8, 2, 1, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(100, 8, html_entity_decode('INCOME TAX '), 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(20, 8, number_format($invoice['income_tax_master'],0), 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     //ib    //     // $pdf->ln(8);    //     // $pdf->Cell(110, 8, 'CUSTOM DUTY :', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     // $pdf->Cell(20, 8, number_format($invoice['custom_duty_master'],0), 0, false, 'R', 0, '', 0, false, 'M', 'M');    //     // $pdf->ln(8);    //     // $pdf->Cell(110, 8, 'INCOME TAX :', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     // $pdf->Cell(20, 8, number_format($invoice['income_tax_master'],0), 0, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(8);    //     $pdf->SetFillColor(221,234,243);    //     $pdf->SetFont('freesans','B',9);    //     $pdf->Cell(10, 8, '', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(100, 8,'TOTAL', 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(20, 8, number_format($invoice['income_tax_master']+$invoice['custom_duty_master']+$invoice['sales_tax_total'],0), 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(8);    //     // $pdf->ln(10);    //     // $pdf->SetFont('freesans','B',9);    //     // $pdf->Cell(110, 8, 'TOTAL :', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     // $pdf->Cell(20, 8, number_format($invoice['income_tax_master']+$invoice['custom_duty_master']+$invoice['sales_tax_total'],0), 0, false, 'R', 0, '', 0, false, 'M', 'M');    //     $sr_expense = 0;    //     $pdf->SetFont('freesans','B',9);    //     $pdf->SetFillColor(194,209,232);    //     $pdf->Cell(130, 8, 'OTHER DUTIES & CHARGES', 0, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(6);    //     foreach($expenses as $expense){    //         $sr_expense++;    //         $pdf->SetFillColor(221,234,243);    //         $pdf->SetFont('freesans','',9);    //         $pdf->Cell(10, 8, $sr_expense, 1, false, 'C', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(100, 8, html_entity_decode($expense['description']), 1, false, 'L', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(20, 8, number_format($expense['expense_amount'],0), 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->ln(8);    //     }    //     // $pdf->ln(8);    //     $pdf->SetFillColor(221,234,243);    //     $pdf->SetFont('freesans','B',9);    //     $pdf->Cell(10, 8, '', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(100, 8,'TOTAL LANDED COST PAID', 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(20, 8, number_format($invoice['expense_total'],0), 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(8);    //     // $pdf->SetFont('freesans','B',9);    //     // $pdf->Cell(110, 8, 'TOTAL LANDED COST PAID', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     // $pdf->Cell(20, 8, number_format($invoice['expense_total'],0), 0, false, 'R', 0, '', 0, false, 'M', 'M');    //     // $pdf->ln(8);    //     // $pdf->Cell(110, 8, 'TOTAL CHARGES PAID', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     // $pdf->Cell(20, 8, number_format($invoice['expense_total'] + $invoice['sales_tax_total'],0), 0, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->SetMargins(30, 30, 50);    //     $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);    //     $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);    //     // set auto page breaks    //     $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);    //     $pdf->AddPage();    //     $pdf->ln(10);    //     $pdf->SetFont('freesans','B',10);    //     $pdf->Cell(200, 9, 'Remarks:  ', 0, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(28, 9, 'Voucher No:  ', 0, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->SetFont('freesans','',10);    //     $pdf->Cell(50, 9, $invoice['document_identity'], '', false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(10);    //     $pdf->SetFont('freesans','',10);    //     $pdf->Cell(200, 9, $invoice['remarks'], 0, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->SetFont('freesans','B',10);    //     $pdf->Cell(28, 9, 'Voucher Date:  ', 0, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->SetFont('freesans','',10);    //     $pdf->Cell(50, 9, stdDate($invoice['document_date']), 0, false, 'L', 0, '', 0, false, 'M', 'M');    //     $total_debit = 0;    //     $total_credit = 0;    //     $pdf->SetFont('freesans','B',10);    //     $pdf->ln(20);    //     $pdf->Cell(110, 8, 'PARTNER', 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(110, 8, 'ACCOUNT DESCRIPTION', 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     //$pdf->Cell(30, 8, '', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(50, 8, 'COST CENTER', 1, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, 'DR', 1, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, 'CR', 1, false, 'C', 0, '', 0, false, 'M', 'M');    //     $this->model['setting']= $this->load->model('common/setting');    //     $setting = $this->model['setting']->getRow(array(    //         'company_id' => $this->session->data['company_id'],    //         'company_branch_id' => $this->session->data['company_branch_id'],    //         'fiscal_year_id' => $this->session->data['fiscal_year_id'],    //         'module' => 'inventory',    //         'field' => 'custom_duty_account_id',    //     ));    //     $custom_duty_account_id = $setting['value'];    //     $setting = $this->model['setting']->getRow(array(    //         'company_id' => $this->session->data['company_id'],    //         'company_branch_id' => $this->session->data['company_branch_id'],    //         'fiscal_year_id' => $this->session->data['fiscal_year_id'],    //         'module' => 'inventory',    //         'field' => 'income_tax_account_id',    //     ));    //     $income_tax_account_id = $setting['value'];    //     $setting = $this->model['setting']->getRow(array(    //         'company_id' => $this->session->data['company_id'],    //         'company_branch_id' => $this->session->data['company_branch_id'],    //         'fiscal_year_id' => $this->session->data['fiscal_year_id'],    //         'module' => 'inventory',    //         'field' => 'freight_charges_account_id',    //     ));    //     $freight_charges_account_id = $setting['value'];    //     $this->model['stock_in_expense']=$this->load->model('inventory/stock_in_expense');    //     $expense = $this->model['stock_in_expense']->getRows(array('stock_in_id' => $stock_in_id));    //     $this->model['stock_in_sales_tax']=$this->load->model('inventory/stock_in_sales_tax');    //     $sales = $this->model['stock_in_sales_tax']->getRows(array('stock_in_id' => $stock_in_id));    //     $this->model['supplier']= $this->load->model('setup/supplier');    //     $supplier = $this->model['supplier']->getRow(array('company_id' => $this->session->data['company_id'],'company_branch_id' => $this->session->data['company_branch_id'],'supplier_id' => $invoice['supplier_id']));    //     $this->model['partner']= $this->load->model('common/partner');    //     $partner = $this->model['partner']->getRow(array('partner_type_id' => $invoice['partner_type_id'], 'partner_id' => $invoice['partner_id']));    //     $this->model['coa_level3'] = $this->load->model('gl/coa_level3');    //     $freight = $this->model['coa_level3']->getRow(array('coa_level3_id' => $freight_charges_account_id));    //     $income = $this->model['coa_level3']->getRow(array('coa_level3_id' => $income_tax_account_id));    //     $custom = $this->model['coa_level3']->getRow(array('coa_level3_id' => $custom_duty_account_id));    //     $clearing_agent = $this->model['coa_level3']->getRow(array('coa_level3_id' => $supplier['outstanding_account_id']));    //     $supplier_entry = $this->model['coa_level3']->getRow(array('coa_level3_id' => $partner['outstanding_account_id']));    //     $pdf->SetFont('freesans','',9);    //     $pdf->ln(8);    //     $pdf->Cell(110, 8,'', 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(110, 8,$custom['name'], 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     //$pdf->Cell(30, 8, 'DR', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(50, 8, $invoice['cost_center'], 1, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, $invoice['custom_duty_master'], 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, '', 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(8);    //     $total_debit += $invoice['custom_duty_master'];    //     $pdf->Cell(110, 8,'', 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(110, 8,$income['name'], 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     //$pdf->Cell(30, 8, 'DR', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(50, 8, $invoice['cost_center'], 1, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, $invoice['income_tax_master'], 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, '', 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(8);    //     $total_debit += $invoice['income_tax_master'];    //     $pdf->Cell(110, 8,'', 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(110, 8,$freight['name'], 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     //$pdf->Cell(30, 8, 'DR', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(50, 8, $invoice['cost_center'], 1, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, $invoice['freight_master'], 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, '', 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(8);    //     $total_debit += $invoice['freight_master'];    //     foreach($expense as $exp){    //         $expense_entries = $this->model['coa_level3']->getRow(array('coa_level3_id' => $exp['coa_id']));    //         //d($exp,true);    //         $pdf->Cell(110, 8,'', 1, false, 'L', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(110, 8,html_entity_decode($expense_entries['name']), 1, false, 'L', 0, '', 0, false, 'M', 'M');    //         //$pdf->Cell(30, 8, 'DR', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(50, 8, $invoice['cost_center'], 1, false, 'C', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(40, 8, $exp['expense_amount'], 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(40, 8, '', 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->ln(8);    //         $total_debit += $exp['expense_amount'];    //     }    //     $pdf->Cell(110, 8,'COLLECTORATE OF CUSTOMS, KARACHI', 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(110, 8,$clearing_agent['name'], 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     //$pdf->Cell(30, 8, 'CR', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(50, 8, $invoice['cost_center'], 1, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, '', 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, $invoice['total_duties_master'], 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(8);    //     $total_credit += $invoice['total_duties_master'];    //     foreach($products as $product){    //         $stock_entries = $this->model['coa_level3']->getRow(array('coa_level3_id' => $product['inventory_account_id']));    //         $pdf->Cell(110, 8,'', 1, false, 'L', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(110, 8,html_entity_decode($stock_entries['name']), 1, false, 'L', 0, '', 0, false, 'M', 'M');    //         //$pdf->Cell(30, 8, 'DR', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(50, 8, $invoice['cost_center'], 1, false, 'C', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(40, 8, $invoice['total_landed_cost_master'], 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(40, 8, '', 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->ln(8);    //         $total_debit += $invoice['total_landed_cost_master'];    //     }    //     $pdf->Cell(110, 8,$partner['name'], 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(110, 8,$supplier_entry['name'], 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     //$pdf->Cell(30, 8, 'CR', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(50, 8, $invoice['cost_center'], 1, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, '', 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, $invoice['total_price_pkr_master'], 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(8);    //     $total_credit += $invoice['total_price_pkr_master'];    //     $pdf->Cell(110, 8,'', 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(110, 8,$custom['name'], 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     //$pdf->Cell(30, 8, 'CR', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(50, 8, $invoice['cost_center'], 1, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, '', 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, $invoice['custom_duty_master'], 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(8);    //     $total_credit += $invoice['custom_duty_master'];    //     $pdf->Cell(110, 8,'', 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(110, 8,$income['name'], 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     //$pdf->Cell(30, 8, 'CR', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(50, 8, $invoice['cost_center'], 1, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, '', 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, $invoice['income_tax_master'], 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(8);    //     $total_credit += $invoice['income_tax_master'];    //     $pdf->Cell(110, 8,'', 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(110, 8,$freight['name'], 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     //$pdf->Cell(30, 8, 'CR', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(50, 8, $invoice['cost_center'], 1, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, '', 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, $invoice['freight_master'], 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(8);    //     $total_credit += $invoice['freight_master'];    //     foreach($expense as $exp){    //         $expense_entries = $this->model['coa_level3']->getRow(array('coa_level3_id' => $exp['coa_id']));    //         $pdf->Cell(110, 8,'', 1, false, 'L', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(110, 8,html_entity_decode($expense_entries['name']), 1, false, 'L', 0, '', 0, false, 'M', 'M');    //         //$pdf->Cell(30, 8, 'CR', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(50, 8, $invoice['cost_center'], 1, false, 'C', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(40, 8, '', 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->Cell(40, 8, $exp['expense_amount'], 1, false, 'R', 0, '', 0, false, 'M', 'M');    //         $pdf->ln(8);    //         $total_credit += $exp['expense_amount'];    //     }    //     $sales_tax_adjustable = $this->model['coa_level3']->getRow(array('name' => 'SALES TAX ADJUSTABLE - IMPORT'));    //     $pdf->Cell(110, 8,'', 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(110, 8,html_entity_decode($sales_tax_adjustable['name']), 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     //$pdf->Cell(30, 8, 'DR', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(50, 8, $invoice['cost_center'], 1, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, $invoice['sales_tax_total'], 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, '', 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(8);    //     $total_debit += $invoice['sales_tax_total'];    //     $pdf->Cell(110, 8,'COLLECTORATE OF CUSTOMS, KARACHI', 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(110, 8,$clearing_agent['name'], 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     //$pdf->Cell(30, 8, 'CR', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(50, 8, $invoice['cost_center'], 1, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, '', 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, $invoice['sales_tax_total'], 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $total_credit += $invoice['sales_tax_total'];    //     $pdf->ln(8);    //     $pdf->SetFont('freesans','B',9);    //     $pdf->Cell(110, 8,'', 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(110, 8,'', 1, false, 'L', 0, '', 0, false, 'M', 'M');    //     //$pdf->Cell(30, 8, 'CR', 0, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(50, 8, '', 1, false, 'C', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, $total_debit, 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->Cell(40, 8, $total_credit, 1, false, 'R', 0, '', 0, false, 'M', 'M');    //     $pdf->ln(8);    //     // set font    //     //Close and output PDF document    //     $pdf->Output('Purchase Invoice - '.$invoice['document_identity'].'.pdf', 'I');    // }    // Print Labelspublic function printLabels(){        ini_set('max_execution_time',0);        ini_set('memory_limit',-1);        $lang = $this->load->language($this->getAlias());        $get = $this->request->get;        $session = $this->session->data;        $stock_in_id = $this->request->get['stock_in_id'];        $product_id = [];        $where = '';                $this->model['stock_in'] = $this->load->model('inventory/stock_in');        $this->model['stock_ledger_history'] = $this->load->model('common/stock_ledger_history');        $this->model['company'] = $this->load->model('setup/company');        $this->model['product']=$this->load->model('inventory/product');        $company_address = $this->model['company']->getRow(array('company_id' => $session['company_id']));        $stock_in = $this->model['stock_in']->getRow(array('stock_in_id' => $get['stock_in_id']));        $stock_ledger_history = $this->model['stock_ledger_history']->getRows(array('document_id' => $stock_in['stock_in_id']));        foreach ($stock_ledger_history as $key => $stock_history) {            $product_id[$key] = $stock_history['product_id'];        }        $where.= "product_id IN('".implode("','", $product_id)."')";        $products = $this->model['product']->getRows($where,array('product_code','sort_order'));        $pdf = new PDF('P', PDF_UNIT, array(50.8,30.4), true, 'UTF-8', false);        $pdf->setPageOrientation('L',false,'');        $pdf->SetAutoPageBreak(TRUE, 0);        // set document information        $pdf->SetCreator(PDF_CREATOR);        $pdf->SetAuthor('Huzaifa Khambaty');        $pdf->SetTitle('Label Print');        $pdf->SetSubject('label Print');        //Set Header        $pdf->data = array(            'company_name' => $session['company_name'],            'report_name' => $lang['heading_title'],            'company_logo' => $session['company_image']        );        // set margins        //$pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);        $pdf->SetMargins(1, 1, 1);        $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);        $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);        $pdf->setPrintHeader(false);        $pdf->setPrintFooter(false);        // set auto page breaks        // $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);        // set font        $pdf->SetFont('times', '', 8);        // add a page        $pdf->AddPage();        $column = 1;        $total_products = '';        $this_code = '';        $pdf->SetFont('helvetica', '', 8);        // d($product,true);        // define barcode style        $style = array(            'position' => 'S',            'align' => 'C',            'stretch' => true,            'fitwidth' => false,            'cellfitalign' => 'C',            'border' => false,            'hpadding' => 'auto',            'vpadding' => 'auto',            'fgcolor' => array(0,0,0),            'bgcolor' => false, //array(255,255,255),            'text' => false,            'font' => 'helvetica',            'fontsize' => 5,            //'module_width' => 13,        );        $total_products = $products;        foreach ($total_products as $key=> $products) {            $key++;             $this_code =  (preg_match('/[\'^£$%&*()}{@#~?><>,|=_+¬-]/', $products['serial_no'])) ? 'C128' : 'C39';                $pdf->ln(2);                $pdf->Cell(48, 0, '', 0, 1,'C');                $pdf->Cell(48, 0, $products['name'], 0, 1,'C');                $pdf->Cell(48, 8,'',0,1);                $x = $pdf->GetX();                $y = $pdf->GetY();                $pdf->setXY($x,$y);                $pdf->write1DBarcode($products['serial_no'], $this_code,$x+2,$y-9,44,12,0.4,$style,'M');                $pdf->ln(6);                $pdf->Cell(48, 0, $products['serial_no'], 0, 1,'C');                $pdf->Cell(48, 0, 'Price: '.number_format($products['cost_price'],2,".",""), 0, 0,'C');                            if($key<count($total_products)) {                $pdf->AddPage();            }          }        // $this->model['partner_category'] = $this->load->model('setup/partner_category');        // $partner_category_id = $this->model['partner_category']->getRow(array('partner_category_id' => $invoice['partner_category_id']));        // $details = $this->model['stock_in_detail']->getRows(array('stock_in_id' => $get['stock_in_id']), array('sort_order asc'));               // $Products = $this->model['product']->getRows(array('stock_in_id' => $stock_in_id),array('serial_no'));        // d($Products,true);        // $pdf = new PDF('P', 'mm', array(75.2,50.8), true, 'UTF-8', false);        // $pdf->setPageOrientation('L',false,'');        // $pdf->SetAutoPageBreak(TRUE, 0);        // // set document information        // $pdf->SetCreator(PDF_CREATOR);        // $pdf->SetAuthor('Fahad');        // $pdf->SetTitle('Print Labels');        // $pdf->SetSubject('Print Labels');        // //Set Header        // $pdf->data = array(        //     'company_name' => $session['company_name'],        //     'report_name' => $lang['heading_title'],        //     'company_logo' => $session['company_image'],        //     'report_type' => 'barcode'        // );        // // set margins        // //$pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);        // $pdf->SetMargins(1, 1, 1);        // // set auto page breaks        // $pdf->SetAutoPageBreak(TRUE, 0);        // // set font        // // $pdf->SetFont('times', '', 8);        // // add a page        // $pdf->AddPage();        // $column = 1;        // $pdf->SetFont('helvetica', '', 8);        // // define barcode style        // $style = array(        //     'position' => 'S',        //     'align' => 'C',        //     'stretch' => true,        //     'fitwidth' => false,        //     'cellfitalign' => 'C',        //     'border' => false,        //     'hpadding' => 'auto',        //     'vpadding' => 'auto',        //     'fgcolor' => array(0,0,0),        //     'bgcolor' => false, //array(255,255,255),        //     'text' => false,        //     'font' => 'helvetica',        //     'fontsize' => 5,        //     //'module_width' => 13,        // );        // $product = array();        // foreach ($details as $detail) {        //     for($i=1; $i<=$detail['qty']; $i++ ){        //         $product[] = $detail;        //     }        // }        //  //d($Products,true);        // for( $i=0; $i< count($Products); $i+=1 ){        //     $pdf->ln(4);        //     $pdf->SetFont('helvetica', 'B', 12);        //     $pdf->Cell(70, 0, $session['company_branch_name'], 0, 0,'C');        //     $pdf->Cell(5, 0, '', 0, 0,'C');        //     if(($i<(count($Products)-1))) {        //         $pdf->Cell(70, 0, $session['company_branch_name'], 0, 0,'C');        //     }        //     $pdf->Cell(70, 0, '', 0, 1,'C');        //     $pdf->SetFont('helvetica', '', 8);        //     $pdf->ln(4);        //     $pdf->Cell(70,0,'',0);        //     $x = $pdf->GetX();        //     $y = $pdf->GetY();        //     $pdf->setXY($x,$y);        //     $pdf->write1DBarcode(strtoupper($Products[$i]['serial_no']), 'C128A', ($x-70), ($y-2), 70, 12, 0.4, $style, 'M');        //     // d($product[$i]['product_code']);        //     if(($i<(count($product)-1))) {        //         $pdf->Cell(70,0,'',0);        //         $x = $pdf->GetX();        //         $y = $pdf->GetY();        //         $pdf->setXY($x,$y);        //         $pdf->write1DBarcode(strtoupper($Products[($i+1)]['serial_no']), 'C128A', ($x-70), ($y-4), 70, 12, 0.4, $style, 'M');        //         // d($product[($i+1)]['product_code']);        //     }        //     $pdf->ln(4);        //     $pdf->SetFont('helvetica', 'B', 8);        //     $pdf->Cell(70, 0, splitString($Products[$i]['name'], 40)[0], 0, 0,'C');        //     // if(($i<(count($Products)-1))) {        //     //     $pdf->Cell(5, 0, '', 0, 0,'C');        //     //     $pdf->Cell(70, 0, $Products[($i+1)]['name'], 0, 0,'C');        //     // }        //     $pdf->ln(5);        //     $pdf->ln(2);        //     $pdf->Cell(35, 0, strtoupper($Products[$i]['serial_no']), 0, 0,'L');        //     // $pdf->Cell(35, 0, strtoupper($Products[$i]['batch_no']), 0, 0,'R');        //     $pdf->ln(5);        //     $pdf->Cell(70, 0, 'Model: '.$Products[$i]['model'], 0, 0,'C');        //     // $pdf->ln(5);        //     // $pdf->Cell(70, 0, 'VS No.: '.$Products[$i]['vendor_serial_no'], 0, 0,'C');        //     $pdf->Cell(5, 0, '', 0, 0,'C');        //     if(($i<(count($Products)-1))) {        //         $pdf->Cell(35, 0, strtoupper($Products[($i+1)]['serial_no']), 1, 0,'L');        //         $pdf->Cell(35, 0, 'Model: '.$Products[($i+1)]['model'], 1, 0,'R');        //     }        //     if(($i<(count($Products)-1))) {        //         $pdf->AddPage();        //     }        // }        //Close and output PDF document        $pdf->Output('print_labels:'.date('YmdHis').'.pdf', 'I');    }}class PDF extends TCPDF {    public $data = array();    //Page header    public function Header() {        // Logo//        if($this->data['company_logo'] != '') {//            $image_file = DIR_IMAGE.$this->data['company_logo'];//            //$this->Image($file, $x='', $y='', $w=0, $h=0, $type='', $link='', $align='', $resize=false, $dpi=300, $palign='', $ismask=false, $imgmask=false, $border=0, $fitbox=false, $hidden=false, $fitonpage=false);//            $this->Image($image_file, 10, 5, 90, '', '', '', 'T', false, 300, '', false, false, 0, false, false, false);//        }        // Set font        if($this->data['report_type'] == 'barcode'){        }else{            $this->SetFont('helvetica', 'B', 20);            $this->Ln(2);            // Title            $this->Cell(0, 10, $this->data['company_name'], 0, false, 'C', 0, '', 0, false, 'M', 'M');            $this->Ln(10);            $this->SetFont('helvetica', 'B', 18);            $this->Cell(0, 10, $this->data['report_name'], 0, false, 'C', 0, '', 0, false, 'M', 'M');        }    }    // Page footer    public function Footer() {        // Position at 15 mm from bottom        if($this->data['report_type'] == 'barcode'){        }else{        $this->SetY(-15);        // Set font        $this->SetFont('helvetica', 'I', 8);        // Page number        $this->Cell(0, 10, 'Page '.$this->getAliasNumPage().'/'.$this->getAliasNbPages(), 0, false, 'C', 0, '', 0, false, 'T', 'M');    }    }}?>