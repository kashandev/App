<?phpclass ControllerInventoryProductUpdate extends HController {    protected function getAlias() {        return 'inventory/product_update';    }    protected function getPrimaryKey() {        return 'product_id';    }    protected function init()    {        $this->model[$this->getAlias()] = $this->load->model('common/setting');        $this->data['lang'] = $this->load->language('inventory/product_update');        $this->document->setTitle($this->data['lang']['heading_title']);        $this->data['token'] = $this->session->data['token'];    }    public function index()    {        $this->redirect($this->url->link($this->getAlias() . '/update', 'token=' . $this->session->data['token'] ));    }    protected function getForm() {        parent::getForm();        $this->model['currency'] = $this->load->model('setup/currency');        $this->data['currencys'] = $this->model['currency']->getRows();        $this->model['product_category'] = $this->load->model('inventory/product_category');        $this->data['product_categorys'] = $this->model['product_category']->getRows(array('company_id' => $this->session->data['company_id']),array('name'));        $this->data['base_currency_id'] = $this->session->data['base_currency_id'];        $this->data['base_currency'] = $this->session->data['base_currency_name'];        $this->data['document_currency_id'] = $this->session->data['base_currency_id'];        $this->data['conversion_rate'] = "1.00";        $this->data['document_date'] = stdDate();        $this->model['product'] = $this->load->model('inventory/product');        if (isset($this->request->get['product_id']) && ($this->request->server['REQUEST_METHOD'] != 'POST')) {            $this->data['isEdit'] = 1;            $result = $this->model['product']->getRow(array($this->getPrimaryKey() => $this->request->get[$this->getPrimaryKey()]));            foreach ($result as $field => $value) {                if ($field == 'document_date') {                    $this->data[$field] = stdDate($value);                } else {                    $this->data[$field] = $value;                }            }            $this->model['product_detail'] = $this->load->model('inventory/product_detail');            $rows = $this->model['product_detail']->getRows(array('product_id' => $this->request->get['product_id']));            foreach($rows as $row_no => $row) {                $this->data['product_details'][$row_no] = $row;            }        }        $this->data['href_get_products'] = $this->url->link($this->getAlias() . '/getProducts', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $this->request->get[$this->getPrimaryKey()], 'SSL');        $this->data['action_post'] = $this->url->link($this->getAlias() . '/post', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $this->request->get[$this->getPrimaryKey()], 'SSL');        $this->data['action_print'] = $this->url->link($this->getAlias() . '/printDocument', 'token=' . $this->session->data['token'] . '&' . $this->getPrimaryKey() . '=' . $this->request->get[$this->getPrimaryKey()], 'SSL');        $this->data['action_validate_date'] = $this->url->link('common/function/validateDate', 'token=' . $this->session->data['token']);        $this->data['strValidation'] = "{            'rules': {                'document_date': {'required': true, 'remote':  {url: '" . $this->data['action_validate_date'] . "', type: 'post'}},                'warehouse_id': {'required': true},                'total_qty': {'required': true},                'total_amount': {'required': true},            },            messages: {            document_date:{                remote: 'Invalid Date'            }}        }";        $this->response->setOutput($this->render());    }    public function getProducts() {        $post = $this->request->post;        $product_category_id = $post['product_category_id'];        $html = '';        $this->model['product'] = $this->load->model('inventory/product');        $products = $this->model['product']->getRows(array('product_category_id' => $product_category_id),array('name'));        //d($products,true);        foreach($products as $row_id => $product) {            $html .= '<tr id="row_id_'.$row_id.'" data-row_id="'.$row_id.'">';            $html .= '<td>';            $html .= '<input type="hidden" name="product_details['.$row_id.'][product_code]" value="'.$product['product_code'].'" />';            $html .= $product['product_code'];            $html .= '</td>';            $html .= '<td style="width: 300px;">';            $html .= '<input style="width:250px;" type="hidden" name="product_details['.$row_id.'][product_id]" value="'.$product['product_id'].'" />';            $html .= $product['name'];            $html .= '</td>';            $html .= '<td>';            $html .= '<input type="hidden" name="product_details['.$row_id.'][brand_id]" value="'.$product['brand_id'].'" />';            $html .= $product['brand'];            $html .= '</td>';            $html .= '<td>';            $html .= '<input  type="text" class="form-control fDecimal" id="product_detail_cost_price_'.$row_id.'" name="product_details['.$row_id.'][cost_price]" value="'.$product['cost_price'].'" />';            $html .= '</td>';            $html .= '<td>';            $html .= '<input  type="text" class="form-control fDecimal" id="product_detail_sale_price_'.$row_id.'" name="product_details['.$row_id.'][sale_price]" value="'.$product['sale_price'].'" />';            $html .= '</td>';            $html .= '<td>';            $html .= '<input  type="text" class="form-control fDecimal" id="product_detail_wholesale_price_'.$row_id.'" name="product_details['.$row_id.'][wholesale_price]" value="'.$product['wholesale_price'].'" />';            $html .= '</td>';            $html .= '<td>';            $html .= '<input  type="text" class="form-control fDecimal" id="product_detail_minimum_price_'.$row_id.'" name="product_details['.$row_id.'][minimum_price]" value="'.$product['minimum_price'].'" />';            $html .= '</td>';            $html .= '</tr>';        }        $json = array (            'success' => true,            'post' => $post,            'html' => $html        );        echo json_encode($json);    }    protected function updateData($primary_key, $data) {//d($data,true);        $this->model['product'] = $this->load->model('inventory/product');        foreach ($data['product_details'] as $sort_order => $detail) {            $product = array(                'cost_price' => $detail['cost_price'],                'sale_price' => $detail['sale_price'],                'wholesale_price' => $detail['wholesale_price'],                'minimum_price' => $detail['minimum_price'],            );            $product_id = $this->model['product']->edit($this->getAlias(),$detail['product_id'], $product);        }        return $product_id;    }    protected function updateRedirect($id, $data) {        $url = $this->getURL();        $this->redirect($this->url->link('inventory/product_update&', 'token=' . $this->session->data['token'] . '&product_id=' . $id, 'SSL'));    }}?>